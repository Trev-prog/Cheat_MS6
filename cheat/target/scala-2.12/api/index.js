Index.PACKAGES = {"gui" : [{"name" : "gui.Controller", "shortDescription" : "A class which defines events' occurances for various user commands.", "members_class" : [{"label" : "showALLplayerSTRATEGY", "tail" : "(): String", "member" : "gui.Controller.showALLplayerSTRATEGY", "link" : "gui\/Controller.html#showALLplayerSTRATEGY:String", "kind" : "def"}, {"label" : "SetStratP3to4", "tail" : "(): Action", "member" : "gui.Controller.SetStratP3to4", "link" : "gui\/Controller.html#SetStratP3to4:scala.swing.Action", "kind" : "def"}, {"label" : "SetStratP3to3", "tail" : "(): Action", "member" : "gui.Controller.SetStratP3to3", "link" : "gui\/Controller.html#SetStratP3to3:scala.swing.Action", "kind" : "def"}, {"label" : "SetStratP3to2", "tail" : "(): Action", "member" : "gui.Controller.SetStratP3to2", "link" : "gui\/Controller.html#SetStratP3to2:scala.swing.Action", "kind" : "def"}, {"label" : "SetStratP3to1", "tail" : "(): Action", "member" : "gui.Controller.SetStratP3to1", "link" : "gui\/Controller.html#SetStratP3to1:scala.swing.Action", "kind" : "def"}, {"label" : "SetStratP2to4", "tail" : "(): Action", "member" : "gui.Controller.SetStratP2to4", "link" : "gui\/Controller.html#SetStratP2to4:scala.swing.Action", "kind" : "def"}, {"label" : "SetStratP2to3", "tail" : "(): Action", "member" : "gui.Controller.SetStratP2to3", "link" : "gui\/Controller.html#SetStratP2to3:scala.swing.Action", "kind" : "def"}, {"label" : "SetStratP2to2", "tail" : "(): Action", "member" : "gui.Controller.SetStratP2to2", "link" : "gui\/Controller.html#SetStratP2to2:scala.swing.Action", "kind" : "def"}, {"label" : "SetStratP2to1", "tail" : "(): Action", "member" : "gui.Controller.SetStratP2to1", "link" : "gui\/Controller.html#SetStratP2to1:scala.swing.Action", "kind" : "def"}, {"label" : "SetStratP1to4", "tail" : "(): Action", "member" : "gui.Controller.SetStratP1to4", "link" : "gui\/Controller.html#SetStratP1to4:scala.swing.Action", "kind" : "def"}, {"label" : "SetStratP1to3", "tail" : "(): Action", "member" : "gui.Controller.SetStratP1to3", "link" : "gui\/Controller.html#SetStratP1to3:scala.swing.Action", "kind" : "def"}, {"label" : "SetStratP1to2", "tail" : "(): Action", "member" : "gui.Controller.SetStratP1to2", "link" : "gui\/Controller.html#SetStratP1to2:scala.swing.Action", "kind" : "def"}, {"label" : "SetStratP1to1", "tail" : "(): Action", "member" : "gui.Controller.SetStratP1to1", "link" : "gui\/Controller.html#SetStratP1to1:scala.swing.Action", "kind" : "def"}, {"label" : "SetStratP0to4", "tail" : "(): Action", "member" : "gui.Controller.SetStratP0to4", "link" : "gui\/Controller.html#SetStratP0to4:scala.swing.Action", "kind" : "def"}, {"label" : "SetStratP0to3", "tail" : "(): Action", "member" : "gui.Controller.SetStratP0to3", "link" : "gui\/Controller.html#SetStratP0to3:scala.swing.Action", "kind" : "def"}, {"label" : "SetStratP0to2", "tail" : "(): Action", "member" : "gui.Controller.SetStratP0to2", "link" : "gui\/Controller.html#SetStratP0to2:scala.swing.Action", "kind" : "def"}, {"label" : "SetStratP0to1", "tail" : "(): Action", "member" : "gui.Controller.SetStratP0to1", "link" : "gui\/Controller.html#SetStratP0to1:scala.swing.Action", "kind" : "def"}, {"label" : "exit", "tail" : "(): Action", "member" : "gui.Controller.exit", "link" : "gui\/Controller.html#exit:scala.swing.Action", "kind" : "def"}, {"label" : "HideCards", "tail" : "(): Action", "member" : "gui.Controller.HideCards", "link" : "gui\/Controller.html#HideCards:scala.swing.Action", "kind" : "def"}, {"label" : "ShowCards", "tail" : "(): Action", "member" : "gui.Controller.ShowCards", "link" : "gui\/Controller.html#ShowCards:scala.swing.Action", "kind" : "def"}, {"label" : "doGame", "tail" : "(): Action", "member" : "gui.Controller.doGame", "link" : "gui\/Controller.html#doGame:scala.swing.Action", "kind" : "def"}, {"label" : "doTurn", "tail" : "(): Action", "member" : "gui.Controller.doTurn", "link" : "gui\/Controller.html#doTurn:scala.swing.Action", "kind" : "def"}, {"label" : "doMove", "tail" : "(): Action", "member" : "gui.Controller.doMove", "link" : "gui\/Controller.html#doMove:scala.swing.Action", "kind" : "def"}, {"label" : "showPOrder", "tail" : "(): String", "member" : "gui.Controller.showPOrder", "link" : "gui\/Controller.html#showPOrder:String", "kind" : "def"}, {"label" : "checkForWinner", "tail" : "(): String", "member" : "gui.Controller.checkForWinner", "link" : "gui\/Controller.html#checkForWinner:String", "kind" : "def"}, {"label" : "initializeRAND", "tail" : "(): Action", "member" : "gui.Controller.initializeRAND", "link" : "gui\/Controller.html#initializeRAND:scala.swing.Action", "kind" : "def"}, {"label" : "initialize", "tail" : "(): Action", "member" : "gui.Controller.initialize", "link" : "gui\/Controller.html#initialize:scala.swing.Action", "kind" : "def"}, {"label" : "showPlayerOrder", "tail" : "(): Action", "member" : "gui.Controller.showPlayerOrder", "link" : "gui\/Controller.html#showPlayerOrder:scala.swing.Action", "kind" : "def"}, {"label" : "advanceOrder", "tail" : "(): Action", "member" : "gui.Controller.advanceOrder", "link" : "gui\/Controller.html#advanceOrder:scala.swing.Action", "kind" : "def"}, {"label" : "showGameArea", "tail" : "(): Action", "member" : "gui.Controller.showGameArea", "link" : "gui\/Controller.html#showGameArea:scala.swing.Action", "kind" : "def"}, {"member" : "gui.Controller#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "gui\/Controller.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "gui\/Controller.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "gui\/Controller.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "gui\/Controller.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "gui\/Controller.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "gui\/Controller.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "gui\/Controller.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "gui\/Controller.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "gui\/Controller.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "gui\/Controller.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "gui\/Controller.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "gui\/Controller.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "gui\/Controller.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "gui\/Controller.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "gui\/Controller.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "gui\/Controller.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "gui\/Controller.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "gui\/Controller.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "gui\/Controller.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "gui\/Controller.html", "kind" : "class"}, {"name" : "gui.gui", "shortDescription" : "Kicks of the GUI", "object" : "gui\/gui$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "gui.gui.main", "link" : "gui\/gui$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "gui\/gui$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "gui\/gui$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "gui\/gui$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "gui\/gui$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "gui\/gui$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "gui\/gui$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "gui\/gui$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "gui\/gui$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "gui\/gui$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "gui\/gui$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "gui\/gui$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "gui\/gui$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "gui\/gui$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "gui\/gui$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "gui\/gui$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "gui\/gui$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "gui\/gui$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "gui\/gui$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "gui\/gui$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "gui.Model", "shortDescription" : "A class which defines the logic for what is used in the GUI.", "members_class" : [{"label" : "showALLplayerSTRATEGY", "tail" : "(): String", "member" : "gui.Model.showALLplayerSTRATEGY", "link" : "gui\/Model.html#showALLplayerSTRATEGY:String", "kind" : "def"}, {"label" : "SetStratP3to4", "tail" : "(): Unit", "member" : "gui.Model.SetStratP3to4", "link" : "gui\/Model.html#SetStratP3to4:Unit", "kind" : "def"}, {"label" : "SetStratP3to3", "tail" : "(): Unit", "member" : "gui.Model.SetStratP3to3", "link" : "gui\/Model.html#SetStratP3to3:Unit", "kind" : "def"}, {"label" : "SetStratP3to2", "tail" : "(): Unit", "member" : "gui.Model.SetStratP3to2", "link" : "gui\/Model.html#SetStratP3to2:Unit", "kind" : "def"}, {"label" : "SetStratP3to1", "tail" : "(): Unit", "member" : "gui.Model.SetStratP3to1", "link" : "gui\/Model.html#SetStratP3to1:Unit", "kind" : "def"}, {"label" : "SetStratP2to4", "tail" : "(): Unit", "member" : "gui.Model.SetStratP2to4", "link" : "gui\/Model.html#SetStratP2to4:Unit", "kind" : "def"}, {"label" : "SetStratP2to3", "tail" : "(): Unit", "member" : "gui.Model.SetStratP2to3", "link" : "gui\/Model.html#SetStratP2to3:Unit", "kind" : "def"}, {"label" : "SetStratP2to2", "tail" : "(): Unit", "member" : "gui.Model.SetStratP2to2", "link" : "gui\/Model.html#SetStratP2to2:Unit", "kind" : "def"}, {"label" : "SetStratP2to1", "tail" : "(): Unit", "member" : "gui.Model.SetStratP2to1", "link" : "gui\/Model.html#SetStratP2to1:Unit", "kind" : "def"}, {"label" : "SetStratP1to4", "tail" : "(): Unit", "member" : "gui.Model.SetStratP1to4", "link" : "gui\/Model.html#SetStratP1to4:Unit", "kind" : "def"}, {"label" : "SetStratP1to3", "tail" : "(): Unit", "member" : "gui.Model.SetStratP1to3", "link" : "gui\/Model.html#SetStratP1to3:Unit", "kind" : "def"}, {"label" : "SetStratP1to2", "tail" : "(): Unit", "member" : "gui.Model.SetStratP1to2", "link" : "gui\/Model.html#SetStratP1to2:Unit", "kind" : "def"}, {"label" : "SetStratP1to1", "tail" : "(): Unit", "member" : "gui.Model.SetStratP1to1", "link" : "gui\/Model.html#SetStratP1to1:Unit", "kind" : "def"}, {"label" : "SetStratP0to4", "tail" : "(): Unit", "member" : "gui.Model.SetStratP0to4", "link" : "gui\/Model.html#SetStratP0to4:Unit", "kind" : "def"}, {"label" : "SetStratP0to3", "tail" : "(): Unit", "member" : "gui.Model.SetStratP0to3", "link" : "gui\/Model.html#SetStratP0to3:Unit", "kind" : "def"}, {"label" : "SetStratP0to2", "tail" : "(): Unit", "member" : "gui.Model.SetStratP0to2", "link" : "gui\/Model.html#SetStratP0to2:Unit", "kind" : "def"}, {"label" : "SetStratP0to1", "tail" : "(): Unit", "member" : "gui.Model.SetStratP0to1", "link" : "gui\/Model.html#SetStratP0to1:Unit", "kind" : "def"}, {"label" : "showPOrder", "tail" : "(): String", "member" : "gui.Model.showPOrder", "link" : "gui\/Model.html#showPOrder:String", "kind" : "def"}, {"label" : "showWinner", "tail" : "(): String", "member" : "gui.Model.showWinner", "link" : "gui\/Model.html#showWinner:String", "kind" : "def"}, {"label" : "bluffMode", "tail" : "(): Boolean", "member" : "gui.Model.bluffMode", "link" : "gui\/Model.html#bluffMode:Boolean", "kind" : "def"}, {"label" : "HideCards", "tail" : "(): Unit", "member" : "gui.Model.HideCards", "link" : "gui\/Model.html#HideCards:Unit", "kind" : "def"}, {"label" : "ShowCards", "tail" : "(): Unit", "member" : "gui.Model.ShowCards", "link" : "gui\/Model.html#ShowCards:Unit", "kind" : "def"}, {"label" : "doGame", "tail" : "(): Unit", "member" : "gui.Model.doGame", "link" : "gui\/Model.html#doGame:Unit", "kind" : "def"}, {"label" : "doTurn", "tail" : "(): Unit", "member" : "gui.Model.doTurn", "link" : "gui\/Model.html#doTurn:Unit", "kind" : "def"}, {"label" : "doMove", "tail" : "(): Unit", "member" : "gui.Model.doMove", "link" : "gui\/Model.html#doMove:Unit", "kind" : "def"}, {"label" : "checkForWinner", "tail" : "(): String", "member" : "gui.Model.checkForWinner", "link" : "gui\/Model.html#checkForWinner:String", "kind" : "def"}, {"label" : "initializeRAND", "tail" : "(): Unit", "member" : "gui.Model.initializeRAND", "link" : "gui\/Model.html#initializeRAND:Unit", "kind" : "def"}, {"label" : "initialize", "tail" : "(): Unit", "member" : "gui.Model.initialize", "link" : "gui\/Model.html#initialize:Unit", "kind" : "def"}, {"label" : "getPlayerOrder", "tail" : "(): String", "member" : "gui.Model.getPlayerOrder", "link" : "gui\/Model.html#getPlayerOrder:String", "kind" : "def"}, {"label" : "advance", "tail" : "(): Unit", "member" : "gui.Model.advance", "link" : "gui\/Model.html#advance:Unit", "kind" : "def"}, {"label" : "getBoard", "tail" : "(): String", "member" : "gui.Model.getBoard", "link" : "gui\/Model.html#getBoard:String", "kind" : "def"}, {"member" : "gui.Model#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "gui\/Model.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "gui\/Model.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "gui\/Model.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "gui\/Model.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "gui\/Model.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "gui\/Model.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "gui\/Model.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "gui\/Model.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "gui\/Model.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "gui\/Model.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "gui\/Model.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "gui\/Model.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "gui\/Model.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "gui\/Model.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "gui\/Model.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "gui\/Model.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "gui\/Model.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "gui\/Model.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "gui\/Model.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "gui\/Model.html", "kind" : "class"}, {"name" : "gui.View", "shortDescription" : "A class which defines what the user will actually see.", "members_class" : [{"label" : "InterfaceMixin", "tail" : "", "member" : "scala.swing.RichWindow.InterfaceMixin", "link" : "gui\/View.html#InterfaceMixinextendsRichWindow.this.InterfaceMixin", "kind" : "trait"}, {"label" : "SuperMixin", "tail" : "", "member" : "scala.swing.Window.SuperMixin", "link" : "gui\/View.html#SuperMixinextendsWindow", "kind" : "trait"}, {"label" : "init", "tail" : "(controller: Controller): Unit", "member" : "gui.View.init", "link" : "gui\/View.html#init(controller:gui.Controller):Unit", "kind" : "def"}, {"label" : "update", "tail" : "(): Unit", "member" : "gui.View.update", "link" : "gui\/View.html#update:Unit", "kind" : "def"}, {"label" : "CardPanel", "tail" : "", "member" : "gui.View.CardPanel", "link" : "gui\/View.html#CardPanelextendsPanel", "kind" : "class"}, {"label" : "PlayerHandPanel", "tail" : "", "member" : "gui.View.PlayerHandPanel", "link" : "gui\/View.html#PlayerHandPanelextendsPanel", "kind" : "class"}, {"label" : "playerHands", "tail" : ": ArrayBuffer[PlayerHandPanel] { def reset: Unit }", "member" : "gui.View.playerHands", "link" : "gui\/View.html#playerHands:scala.collection.mutable.ArrayBuffer[View.this.PlayerHandPanel]{defreset:Unit}", "kind" : "val"}, {"label" : "middle", "tail" : "", "member" : "gui.View.middle", "link" : "gui\/View.html#middle", "kind" : "object"}, {"label" : "discard", "tail" : "", "member" : "gui.View.discard", "link" : "gui\/View.html#discard", "kind" : "object"}, {"label" : "playArea", "tail" : "", "member" : "gui.View.playArea", "link" : "gui\/View.html#playArea", "kind" : "object"}, {"label" : "cardSpaces", "tail" : "", "member" : "gui.View.cardSpaces", "link" : "gui\/View.html#cardSpaces", "kind" : "object"}, {"label" : "gameArea", "tail" : "", "member" : "gui.View.gameArea", "link" : "gui\/View.html#gameArea", "kind" : "object"}, {"label" : "textArea", "tail" : ": TextArea", "member" : "gui.View.textArea", "link" : "gui\/View.html#textArea:scala.swing.TextArea", "kind" : "val"}, {"label" : "startGame", "tail" : ": Boolean", "member" : "gui.View.startGame", "link" : "gui\/View.html#startGame:Boolean", "kind" : "var"}, {"label" : "showCardsBool", "tail" : ": Boolean", "member" : "gui.View.showCardsBool", "link" : "gui\/View.html#showCardsBool:Boolean", "kind" : "var"}, {"label" : "_controller", "tail" : ": Option[Controller]", "member" : "gui.View._controller", "link" : "gui\/View.html#_controller:Option[gui.Controller]", "kind" : "var"}, {"member" : "gui.View#<init>", "error" : "unsupported entity"}, {"label" : "closeOperation", "tail" : "(): Unit", "member" : "scala.swing.MainFrame.closeOperation", "link" : "gui\/View.html#closeOperation():Unit", "kind" : "def"}, {"label" : "iconImage_=", "tail" : "(i: Image): Unit", "member" : "scala.swing.Frame.iconImage_=", "link" : "gui\/View.html#iconImage_=(i:scala.swing.Image):Unit", "kind" : "def"}, {"label" : "iconImage", "tail" : "(): Image", "member" : "scala.swing.Frame.iconImage", "link" : "gui\/View.html#iconImage:scala.swing.Image", "kind" : "def"}, {"label" : "maximized", "tail" : "(): Boolean", "member" : "scala.swing.Frame.maximized", "link" : "gui\/View.html#maximized:Boolean", "kind" : "def"}, {"label" : "unmaximize", "tail" : "(): Unit", "member" : "scala.swing.Frame.unmaximize", "link" : "gui\/View.html#unmaximize():Unit", "kind" : "def"}, {"label" : "maximize", "tail" : "(): Unit", "member" : "scala.swing.Frame.maximize", "link" : "gui\/View.html#maximize():Unit", "kind" : "def"}, {"label" : "iconified", "tail" : "(): Boolean", "member" : "scala.swing.Frame.iconified", "link" : "gui\/View.html#iconified:Boolean", "kind" : "def"}, {"label" : "uniconify", "tail" : "(): Unit", "member" : "scala.swing.Frame.uniconify", "link" : "gui\/View.html#uniconify():Unit", "kind" : "def"}, {"label" : "iconify", "tail" : "(): Unit", "member" : "scala.swing.Frame.iconify", "link" : "gui\/View.html#iconify():Unit", "kind" : "def"}, {"label" : "peer", "tail" : ": JFrame with InterfaceMixin", "member" : "scala.swing.Frame.peer", "link" : "gui\/View.html#peer:javax.swing.JFramewithFrame.this.InterfaceMixin", "kind" : "lazy val"}, {"label" : "resizable", "tail" : "(): Boolean", "member" : "scala.swing.RichWindow.resizable", "link" : "gui\/View.html#resizable:Boolean", "kind" : "def"}, {"label" : "resizable_=", "tail" : "(b: Boolean): Unit", "member" : "scala.swing.RichWindow.resizable_=", "link" : "gui\/View.html#resizable_=(b:Boolean):Unit", "kind" : "def"}, {"label" : "menuBar_=", "tail" : "(m: MenuBar): Unit", "member" : "scala.swing.RichWindow.menuBar_=", "link" : "gui\/View.html#menuBar_=(m:scala.swing.MenuBar):Unit", "kind" : "def"}, {"label" : "menuBar", "tail" : "(): MenuBar", "member" : "scala.swing.RichWindow.menuBar", "link" : "gui\/View.html#menuBar:scala.swing.MenuBar", "kind" : "def"}, {"label" : "title_=", "tail" : "(s: String): Unit", "member" : "scala.swing.RichWindow.title_=", "link" : "gui\/View.html#title_=(s:String):Unit", "kind" : "def"}, {"label" : "title", "tail" : "(): String", "member" : "scala.swing.RichWindow.title", "link" : "gui\/View.html#title:String", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "scala.swing.Window.close", "link" : "gui\/View.html#close():Unit", "kind" : "def"}, {"label" : "open", "tail" : "(): Unit", "member" : "scala.swing.Window.open", "link" : "gui\/View.html#open():Unit", "kind" : "def"}, {"label" : "owner", "tail" : "(): Window", "member" : "scala.swing.Window.owner", "link" : "gui\/View.html#owner:scala.swing.Window", "kind" : "def"}, {"label" : "bounds_=", "tail" : "(rect: Rectangle): Unit", "member" : "scala.swing.Window.bounds_=", "link" : "gui\/View.html#bounds_=(rect:scala.swing.Rectangle):Unit", "kind" : "def"}, {"label" : "size_=", "tail" : "(size: Dimension): Unit", "member" : "scala.swing.Window.size_=", "link" : "gui\/View.html#size_=(size:scala.swing.Dimension):Unit", "kind" : "def"}, {"label" : "location_=", "tail" : "(p: Point): Unit", "member" : "scala.swing.Window.location_=", "link" : "gui\/View.html#location_=(p:scala.swing.Point):Unit", "kind" : "def"}, {"label" : "centerOnScreen", "tail" : "(): Unit", "member" : "scala.swing.Window.centerOnScreen", "link" : "gui\/View.html#centerOnScreen():Unit", "kind" : "def"}, {"label" : "setLocationRelativeTo", "tail" : "(c: UIElement): Unit", "member" : "scala.swing.Window.setLocationRelativeTo", "link" : "gui\/View.html#setLocationRelativeTo(c:scala.swing.UIElement):Unit", "kind" : "def"}, {"label" : "pack", "tail" : "(): View.this.type", "member" : "scala.swing.Window.pack", "link" : "gui\/View.html#pack():Window.this.type", "kind" : "def"}, {"label" : "dispose", "tail" : "(): Unit", "member" : "scala.swing.Window.dispose", "link" : "gui\/View.html#dispose():Unit", "kind" : "def"}, {"label" : "defaultButton_=", "tail" : "(b: Option[Button]): Unit", "member" : "scala.swing.Window.defaultButton_=", "link" : "gui\/View.html#defaultButton_=(b:Option[scala.swing.Button]):Unit", "kind" : "def"}, {"label" : "defaultButton_=", "tail" : "(b: Button): Unit", "member" : "scala.swing.Window.defaultButton_=", "link" : "gui\/View.html#defaultButton_=(b:scala.swing.Button):Unit", "kind" : "def"}, {"label" : "defaultButton", "tail" : "(): Option[Button]", "member" : "scala.swing.Window.defaultButton", "link" : "gui\/View.html#defaultButton:Option[scala.swing.Button]", "kind" : "def"}, {"label" : "contents_=", "tail" : "(c: Component): Unit", "member" : "scala.swing.Window.contents_=", "link" : "gui\/View.html#contents_=(c:scala.swing.Component):Unit", "kind" : "def"}, {"label" : "contents", "tail" : "(): Seq[Component]", "member" : "scala.swing.RootPanel.contents", "link" : "gui\/View.html#contents:Seq[scala.swing.Component]", "kind" : "def"}, {"label" : "onLastUnsubscribe", "tail" : "(): Unit", "member" : "scala.swing.UIElement.onLastUnsubscribe", "link" : "gui\/View.html#onLastUnsubscribe():Unit", "kind" : "def"}, {"label" : "onFirstSubscribe", "tail" : "(): Unit", "member" : "scala.swing.UIElement.onFirstSubscribe", "link" : "gui\/View.html#onFirstSubscribe():Unit", "kind" : "def"}, {"label" : "ignoreRepaint_=", "tail" : "(b: Boolean): Unit", "member" : "scala.swing.UIElement.ignoreRepaint_=", "link" : "gui\/View.html#ignoreRepaint_=(b:Boolean):Unit", "kind" : "def"}, {"label" : "ignoreRepaint", "tail" : "(): Boolean", "member" : "scala.swing.UIElement.ignoreRepaint", "link" : "gui\/View.html#ignoreRepaint:Boolean", "kind" : "def"}, {"label" : "repaint", "tail" : "(rect: Rectangle): Unit", "member" : "scala.swing.UIElement.repaint", "link" : "gui\/View.html#repaint(rect:scala.swing.Rectangle):Unit", "kind" : "def"}, {"label" : "repaint", "tail" : "(): Unit", "member" : "scala.swing.UIElement.repaint", "link" : "gui\/View.html#repaint():Unit", "kind" : "def"}, {"label" : "validate", "tail" : "(): Unit", "member" : "scala.swing.UIElement.validate", "link" : "gui\/View.html#validate():Unit", "kind" : "def"}, {"label" : "displayable", "tail" : "(): Boolean", "member" : "scala.swing.UIElement.displayable", "link" : "gui\/View.html#displayable:Boolean", "kind" : "def"}, {"label" : "showing", "tail" : "(): Boolean", "member" : "scala.swing.UIElement.showing", "link" : "gui\/View.html#showing:Boolean", "kind" : "def"}, {"label" : "visible_=", "tail" : "(b: Boolean): Unit", "member" : "scala.swing.UIElement.visible_=", "link" : "gui\/View.html#visible_=(b:Boolean):Unit", "kind" : "def"}, {"label" : "visible", "tail" : "(): Boolean", "member" : "scala.swing.UIElement.visible", "link" : "gui\/View.html#visible:Boolean", "kind" : "def"}, {"label" : "cursor_=", "tail" : "(c: Cursor): Unit", "member" : "scala.swing.UIElement.cursor_=", "link" : "gui\/View.html#cursor_=(c:java.awt.Cursor):Unit", "kind" : "def"}, {"label" : "cursor", "tail" : "(): Cursor", "member" : "scala.swing.UIElement.cursor", "link" : "gui\/View.html#cursor:java.awt.Cursor", "kind" : "def"}, {"label" : "toolkit", "tail" : "(): Toolkit", "member" : "scala.swing.UIElement.toolkit", "link" : "gui\/View.html#toolkit:java.awt.Toolkit", "kind" : "def"}, {"label" : "locale", "tail" : "(): Locale", "member" : "scala.swing.UIElement.locale", "link" : "gui\/View.html#locale:java.util.Locale", "kind" : "def"}, {"label" : "size", "tail" : "(): Dimension", "member" : "scala.swing.UIElement.size", "link" : "gui\/View.html#size:java.awt.Dimension", "kind" : "def"}, {"label" : "bounds", "tail" : "(): Rectangle", "member" : "scala.swing.UIElement.bounds", "link" : "gui\/View.html#bounds:java.awt.Rectangle", "kind" : "def"}, {"label" : "location", "tail" : "(): Point", "member" : "scala.swing.UIElement.location", "link" : "gui\/View.html#location:java.awt.Point", "kind" : "def"}, {"label" : "locationOnScreen", "tail" : "(): Point", "member" : "scala.swing.UIElement.locationOnScreen", "link" : "gui\/View.html#locationOnScreen:java.awt.Point", "kind" : "def"}, {"label" : "font_=", "tail" : "(f: Font): Unit", "member" : "scala.swing.UIElement.font_=", "link" : "gui\/View.html#font_=(f:scala.swing.Font):Unit", "kind" : "def"}, {"label" : "font", "tail" : "(): Font", "member" : "scala.swing.UIElement.font", "link" : "gui\/View.html#font:scala.swing.Font", "kind" : "def"}, {"label" : "componentOrientation_=", "tail" : "(x: ComponentOrientation): Unit", "member" : "scala.swing.UIElement.componentOrientation_=", "link" : "gui\/View.html#componentOrientation_=(x:java.awt.ComponentOrientation):Unit", "kind" : "def"}, {"label" : "componentOrientation", "tail" : "(): ComponentOrientation", "member" : "scala.swing.UIElement.componentOrientation", "link" : "gui\/View.html#componentOrientation:java.awt.ComponentOrientation", "kind" : "def"}, {"label" : "preferredSize_=", "tail" : "(x: Dimension): Unit", "member" : "scala.swing.UIElement.preferredSize_=", "link" : "gui\/View.html#preferredSize_=(x:scala.swing.Dimension):Unit", "kind" : "def"}, {"label" : "preferredSize", "tail" : "(): Dimension", "member" : "scala.swing.UIElement.preferredSize", "link" : "gui\/View.html#preferredSize:java.awt.Dimension", "kind" : "def"}, {"label" : "maximumSize_=", "tail" : "(x: Dimension): Unit", "member" : "scala.swing.UIElement.maximumSize_=", "link" : "gui\/View.html#maximumSize_=(x:scala.swing.Dimension):Unit", "kind" : "def"}, {"label" : "maximumSize", "tail" : "(): Dimension", "member" : "scala.swing.UIElement.maximumSize", "link" : "gui\/View.html#maximumSize:java.awt.Dimension", "kind" : "def"}, {"label" : "minimumSize_=", "tail" : "(x: Dimension): Unit", "member" : "scala.swing.UIElement.minimumSize_=", "link" : "gui\/View.html#minimumSize_=(x:scala.swing.Dimension):Unit", "kind" : "def"}, {"label" : "minimumSize", "tail" : "(): Dimension", "member" : "scala.swing.UIElement.minimumSize", "link" : "gui\/View.html#minimumSize:java.awt.Dimension", "kind" : "def"}, {"label" : "background_=", "tail" : "(c: Color): Unit", "member" : "scala.swing.UIElement.background_=", "link" : "gui\/View.html#background_=(c:scala.swing.Color):Unit", "kind" : "def"}, {"label" : "background", "tail" : "(): Color", "member" : "scala.swing.UIElement.background", "link" : "gui\/View.html#background:scala.swing.Color", "kind" : "def"}, {"label" : "foreground_=", "tail" : "(c: Color): Unit", "member" : "scala.swing.UIElement.foreground_=", "link" : "gui\/View.html#foreground_=(c:scala.swing.Color):Unit", "kind" : "def"}, {"label" : "foreground", "tail" : "(): Color", "member" : "scala.swing.UIElement.foreground", "link" : "gui\/View.html#foreground:scala.swing.Color", "kind" : "def"}, {"label" : "self", "tail" : "(): Component", "member" : "scala.swing.UIElement.self", "link" : "gui\/View.html#self:java.awt.Component", "kind" : "def"}, {"label" : "unsubscribe", "tail" : "(listener: Reaction): Unit", "member" : "scala.swing.LazyPublisher.unsubscribe", "link" : "gui\/View.html#unsubscribe(listener:scala.swing.Reactions.Reaction):Unit", "kind" : "def"}, {"label" : "subscribe", "tail" : "(listener: Reaction): Unit", "member" : "scala.swing.LazyPublisher.subscribe", "link" : "gui\/View.html#subscribe(listener:scala.swing.Reactions.Reaction):Unit", "kind" : "def"}, {"label" : "publish", "tail" : "(e: Event): Unit", "member" : "scala.swing.Publisher.publish", "link" : "gui\/View.html#publish(e:scala.swing.event.Event):Unit", "kind" : "def"}, {"label" : "listeners", "tail" : ": RefSet[Reaction] { val underlying: scala.collection.mutable.HashSet[scala.ref.Reference[scala.swing.Reactions.Reaction]] }", "member" : "scala.swing.Publisher.listeners", "link" : "gui\/View.html#listeners:scala.swing.RefSet[scala.swing.Reactions.Reaction]{valunderlying:scala.collection.mutable.HashSet[scala.ref.Reference[scala.swing.Reactions.Reaction]]}", "kind" : "val"}, {"label" : "deafTo", "tail" : "(ps: Publisher*): Unit", "member" : "scala.swing.Reactor.deafTo", "link" : "gui\/View.html#deafTo(ps:scala.swing.Publisher*):Unit", "kind" : "def"}, {"label" : "listenTo", "tail" : "(ps: Publisher*): Unit", "member" : "scala.swing.Reactor.listenTo", "link" : "gui\/View.html#listenTo(ps:scala.swing.Publisher*):Unit", "kind" : "def"}, {"label" : "reactions", "tail" : ": Reactions", "member" : "scala.swing.Reactor.reactions", "link" : "gui\/View.html#reactions:scala.swing.Reactions", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Proxy.toString", "link" : "gui\/View.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "scala.Proxy.equals", "link" : "gui\/View.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Proxy.hashCode", "link" : "gui\/View.html#hashCode():Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "gui\/View.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "gui\/View.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "gui\/View.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "gui\/View.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "gui\/View.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "gui\/View.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "gui\/View.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "gui\/View.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "gui\/View.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "gui\/View.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "gui\/View.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "gui\/View.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "gui\/View.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "gui\/View.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "gui\/View.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "gui\/View.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "gui\/View.html", "kind" : "class"}], "menu_commands" : [{"name" : "menu_commands.Board", "shortDescription" : "A board for when this game is run with text display.", "object" : "menu_commands\/Board$.html", "members_object" : [{"label" : "show", "tail" : "(): String", "member" : "menu_commands.Board.show", "link" : "menu_commands\/Board$.html#show:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "menu_commands\/Board$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "menu_commands\/Board$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "menu_commands\/Board$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "menu_commands\/Board$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "menu_commands\/Board$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "menu_commands\/Board$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "menu_commands\/Board$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Board$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Board$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Board$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "menu_commands\/Board$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "menu_commands\/Board$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "menu_commands\/Board$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "menu_commands\/Board$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "menu_commands\/Board$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "menu_commands\/Board$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "menu_commands\/Board$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "menu_commands\/Board$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "menu_commands\/Board$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "menu_commands.Card", "shortDescription" : "A card used in the deck and discard object, as well as in player hands.", "members_class" : [{"label" : "showCARD", "tail" : "(): String", "member" : "menu_commands.Card.showCARD", "link" : "menu_commands\/Card.html#showCARD:String", "kind" : "def"}, {"member" : "menu_commands.Card#<init>", "error" : "unsupported entity"}, {"label" : "suit", "tail" : ": String", "member" : "menu_commands.Card.suit", "link" : "menu_commands\/Card.html#suit:String", "kind" : "val"}, {"label" : "num", "tail" : ": Int", "member" : "menu_commands.Card.num", "link" : "menu_commands\/Card.html#num:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "menu_commands\/Card.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "menu_commands\/Card.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "menu_commands\/Card.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "menu_commands\/Card.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "menu_commands\/Card.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "menu_commands\/Card.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "menu_commands\/Card.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Card.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Card.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Card.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "menu_commands\/Card.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "menu_commands\/Card.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "menu_commands\/Card.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "menu_commands\/Card.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "menu_commands\/Card.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "menu_commands\/Card.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "menu_commands\/Card.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "menu_commands\/Card.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "menu_commands\/Card.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "menu_commands\/Card.html", "kind" : "class"}, {"name" : "menu_commands.CountCard", "shortDescription" : "A counter created with a queue", "object" : "menu_commands\/CountCard$.html", "members_object" : [{"label" : "WithFilter", "tail" : "", "member" : "scala.collection.TraversableLike.WithFilter", "link" : "menu_commands\/CountCard$.html#WithFilterextendsFilterMonadic[A,Repr]", "kind" : "class"}, {"label" : "current", "tail" : "(): Int", "member" : "menu_commands.CountCard.current", "link" : "menu_commands\/CountCard$.html#current:Int", "kind" : "def"}, {"label" : "advance", "tail" : "(): Unit", "member" : "menu_commands.CountCard.advance", "link" : "menu_commands\/CountCard$.html#advance:Unit", "kind" : "def"}, {"label" : "inIT", "tail" : "(): Unit", "member" : "menu_commands.CountCard.inIT", "link" : "menu_commands\/CountCard$.html#inIT:Unit", "kind" : "def"}, {"label" : "clone", "tail" : "(): Queue[Int]", "member" : "scala.collection.mutable.Queue.clone", "link" : "menu_commands\/CountCard$.html#clone():scala.collection.mutable.Queue[A]", "kind" : "def"}, {"label" : "tail", "tail" : "(): Queue[Int]", "member" : "scala.collection.mutable.Queue.tail", "link" : "menu_commands\/CountCard$.html#tail:scala.collection.mutable.Queue[A]", "kind" : "def"}, {"label" : "front", "tail" : "(): Int", "member" : "scala.collection.mutable.Queue.front", "link" : "menu_commands\/CountCard$.html#front:A", "kind" : "def"}, {"label" : "extractFirst", "tail" : "(start: LinkedList[Int], p: (Int) ⇒ Boolean): Option[LinkedList[Int]]", "member" : "scala.collection.mutable.Queue.extractFirst", "link" : "menu_commands\/CountCard$.html#extractFirst(start:scala.collection.mutable.LinkedList[A],p:A=>Boolean):Option[scala.collection.mutable.LinkedList[A]]", "kind" : "def"}, {"label" : "dequeueAll", "tail" : "(p: (Int) ⇒ Boolean): Seq[Int]", "member" : "scala.collection.mutable.Queue.dequeueAll", "link" : "menu_commands\/CountCard$.html#dequeueAll(p:A=>Boolean):scala.collection.mutable.Seq[A]", "kind" : "def"}, {"label" : "dequeueFirst", "tail" : "(p: (Int) ⇒ Boolean): Option[Int]", "member" : "scala.collection.mutable.Queue.dequeueFirst", "link" : "menu_commands\/CountCard$.html#dequeueFirst(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "dequeue", "tail" : "(): Int", "member" : "scala.collection.mutable.Queue.dequeue", "link" : "menu_commands\/CountCard$.html#dequeue():A", "kind" : "def"}, {"label" : "enqueue", "tail" : "(elems: Int*): Unit", "member" : "scala.collection.mutable.Queue.enqueue", "link" : "menu_commands\/CountCard$.html#enqueue(elems:A*):Unit", "kind" : "def"}, {"label" : "newBuilder", "tail" : "(): Builder[Int, Queue[Int]]", "member" : "scala.collection.mutable.Queue.newBuilder", "link" : "menu_commands\/CountCard$.html#newBuilder:scala.collection.mutable.Builder[A,scala.collection.mutable.Queue[A]]", "kind" : "def"}, {"label" : "companion", "tail" : "(): GenericCompanion[Queue]", "member" : "scala.collection.mutable.Queue.companion", "link" : "menu_commands\/CountCard$.html#companion:scala.collection.generic.GenericCompanion[scala.collection.mutable.Queue]", "kind" : "def"}, {"label" : "result", "tail" : "(): MutableList[Int]", "member" : "scala.collection.mutable.MutableList.result", "link" : "menu_commands\/CountCard$.html#result():scala.collection.mutable.MutableList[A]", "kind" : "def"}, {"label" : "clear", "tail" : "(): Unit", "member" : "scala.collection.mutable.MutableList.clear", "link" : "menu_commands\/CountCard$.html#clear():Unit", "kind" : "def"}, {"label" : "+=", "tail" : "(elem: Int): CountCard.this.type", "member" : "scala.collection.mutable.MutableList.+=", "link" : "menu_commands\/CountCard$.html#+=(elem:A):MutableList.this.type", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Int]", "member" : "scala.collection.mutable.MutableList.toList", "link" : "menu_commands\/CountCard$.html#toList:List[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): Int", "member" : "scala.collection.mutable.MutableList.last", "link" : "menu_commands\/CountCard$.html#last:A", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[Int]", "member" : "scala.collection.mutable.MutableList.iterator", "link" : "menu_commands\/CountCard$.html#iterator:Iterator[A]", "kind" : "def"}, {"label" : "appendElem", "tail" : "(elem: Int): Unit", "member" : "scala.collection.mutable.MutableList.appendElem", "link" : "menu_commands\/CountCard$.html#appendElem(elem:A):Unit", "kind" : "def"}, {"label" : "prependElem", "tail" : "(elem: Int): Unit", "member" : "scala.collection.mutable.MutableList.prependElem", "link" : "menu_commands\/CountCard$.html#prependElem(elem:A):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(n: Int): Option[Int]", "member" : "scala.collection.mutable.MutableList.get", "link" : "menu_commands\/CountCard$.html#get(n:Int):Option[A]", "kind" : "def"}, {"label" : "update", "tail" : "(n: Int, x: Int): Unit", "member" : "scala.collection.mutable.MutableList.update", "link" : "menu_commands\/CountCard$.html#update(n:Int,x:A):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(n: Int): Int", "member" : "scala.collection.mutable.MutableList.apply", "link" : "menu_commands\/CountCard$.html#apply(n:Int):A", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.mutable.MutableList.length", "link" : "menu_commands\/CountCard$.html#length:Int", "kind" : "def"}, {"label" : "+=:", "tail" : "(elem: Int): CountCard.this.type", "member" : "scala.collection.mutable.MutableList.+=:", "link" : "menu_commands\/CountCard$.html#+=:(elem:A):MutableList.this.type", "kind" : "def"}, {"label" : "tailImpl", "tail" : "(tl: MutableList[Int]): Unit", "member" : "scala.collection.mutable.MutableList.tailImpl", "link" : "menu_commands\/CountCard$.html#tailImpl(tl:scala.collection.mutable.MutableList[A]):Unit", "kind" : "final def"}, {"label" : "head", "tail" : "(): Int", "member" : "scala.collection.mutable.MutableList.head", "link" : "menu_commands\/CountCard$.html#head:A", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.mutable.MutableList.isEmpty", "link" : "menu_commands\/CountCard$.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "toQueue", "tail" : "(): Queue[Int]", "member" : "scala.collection.mutable.MutableList.toQueue", "link" : "menu_commands\/CountCard$.html#toQueue:scala.collection.mutable.Queue[A]", "kind" : "def"}, {"label" : "len", "tail" : ": Int", "member" : "scala.collection.mutable.MutableList.len", "link" : "menu_commands\/CountCard$.html#len:Int", "kind" : "var"}, {"label" : "last0", "tail" : ": LinkedList[Int]", "member" : "scala.collection.mutable.MutableList.last0", "link" : "menu_commands\/CountCard$.html#last0:scala.collection.mutable.LinkedList[A]", "kind" : "var"}, {"label" : "first0", "tail" : ": LinkedList[Int]", "member" : "scala.collection.mutable.MutableList.first0", "link" : "menu_commands\/CountCard$.html#first0:scala.collection.mutable.LinkedList[A]", "kind" : "var"}, {"label" : "mapResult", "tail" : "(f: (MutableList[Int]) ⇒ NewTo): Builder[Int, NewTo]", "member" : "scala.collection.mutable.Builder.mapResult", "link" : "menu_commands\/CountCard$.html#mapResult[NewTo](f:To=>NewTo):scala.collection.mutable.Builder[Elem,NewTo]", "kind" : "def"}, {"label" : "sizeHintBounded", "tail" : "(size: Int, boundingColl: TraversableLike[_, _]): Unit", "member" : "scala.collection.mutable.Builder.sizeHintBounded", "link" : "menu_commands\/CountCard$.html#sizeHintBounded(size:Int,boundingColl:scala.collection.TraversableLike[_,_]):Unit", "kind" : "def"}, {"label" : "sizeHint", "tail" : "(coll: TraversableLike[_, _], delta: Int): Unit", "member" : "scala.collection.mutable.Builder.sizeHint", "link" : "menu_commands\/CountCard$.html#sizeHint(coll:scala.collection.TraversableLike[_,_],delta:Int):Unit", "kind" : "def"}, {"label" : "sizeHint", "tail" : "(coll: TraversableLike[_, _]): Unit", "member" : "scala.collection.mutable.Builder.sizeHint", "link" : "menu_commands\/CountCard$.html#sizeHint(coll:scala.collection.TraversableLike[_,_]):Unit", "kind" : "def"}, {"label" : "sizeHint", "tail" : "(size: Int): Unit", "member" : "scala.collection.mutable.Builder.sizeHint", "link" : "menu_commands\/CountCard$.html#sizeHint(size:Int):Unit", "kind" : "def"}, {"label" : "++=", "tail" : "(xs: TraversableOnce[Int]): CountCard.this.type", "member" : "scala.collection.generic.Growable.++=", "link" : "menu_commands\/CountCard$.html#++=(xs:scala.collection.TraversableOnce[A]):Growable.this.type", "kind" : "def"}, {"label" : "+=", "tail" : "(elem1: Int, elem2: Int, elems: Int*): CountCard.this.type", "member" : "scala.collection.generic.Growable.+=", "link" : "menu_commands\/CountCard$.html#+=(elem1:A,elem2:A,elems:A*):Growable.this.type", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (Int) ⇒ Boolean, end: Int): Int", "member" : "scala.collection.LinearSeqOptimized.lastIndexWhere", "link" : "menu_commands\/CountCard$.html#lastIndexWhere(p:A=>Boolean,end:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Int) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.LinearSeqOptimized.indexWhere", "link" : "menu_commands\/CountCard$.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "segmentLength", "tail" : "(p: (Int) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.LinearSeqOptimized.segmentLength", "link" : "menu_commands\/CountCard$.html#segmentLength(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "isDefinedAt", "tail" : "(x: Int): Boolean", "member" : "scala.collection.LinearSeqOptimized.isDefinedAt", "link" : "menu_commands\/CountCard$.html#isDefinedAt(x:Int):Boolean", "kind" : "def"}, {"label" : "lengthCompare", "tail" : "(len: Int): Int", "member" : "scala.collection.LinearSeqOptimized.lengthCompare", "link" : "menu_commands\/CountCard$.html#lengthCompare(len:Int):Int", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: GenIterable[B]): Boolean", "member" : "scala.collection.LinearSeqOptimized.sameElements", "link" : "menu_commands\/CountCard$.html#sameElements[B>:A](that:scala.collection.GenIterable[B]):Boolean", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Int) ⇒ Boolean): (Queue[Int], Queue[Int])", "member" : "scala.collection.LinearSeqOptimized.span", "link" : "menu_commands\/CountCard$.html#span(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Int) ⇒ Boolean): Queue[Int]", "member" : "scala.collection.LinearSeqOptimized.takeWhile", "link" : "menu_commands\/CountCard$.html#takeWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Queue[Int]", "member" : "scala.collection.LinearSeqOptimized.slice", "link" : "menu_commands\/CountCard$.html#slice(from:Int,until:Int):Repr", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): Queue[Int]", "member" : "scala.collection.LinearSeqOptimized.dropRight", "link" : "menu_commands\/CountCard$.html#dropRight(n:Int):Repr", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Queue[Int]", "member" : "scala.collection.LinearSeqOptimized.drop", "link" : "menu_commands\/CountCard$.html#drop(n:Int):Repr", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Queue[Int]", "member" : "scala.collection.LinearSeqOptimized.take", "link" : "menu_commands\/CountCard$.html#take(n:Int):Repr", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Int, B) ⇒ B): B", "member" : "scala.collection.LinearSeqOptimized.reduceRight", "link" : "menu_commands\/CountCard$.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Int) ⇒ B): B", "member" : "scala.collection.LinearSeqOptimized.reduceLeft", "link" : "menu_commands\/CountCard$.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Int, B) ⇒ B): B", "member" : "scala.collection.LinearSeqOptimized.foldRight", "link" : "menu_commands\/CountCard$.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Int) ⇒ B): B", "member" : "scala.collection.LinearSeqOptimized.foldLeft", "link" : "menu_commands\/CountCard$.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Int) ⇒ Boolean): Option[Int]", "member" : "scala.collection.LinearSeqOptimized.find", "link" : "menu_commands\/CountCard$.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: A1): Boolean", "member" : "scala.collection.LinearSeqOptimized.contains", "link" : "menu_commands\/CountCard$.html#contains[A1>:A](elem:A1):Boolean", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Int) ⇒ Boolean): Boolean", "member" : "scala.collection.LinearSeqOptimized.exists", "link" : "menu_commands\/CountCard$.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Int) ⇒ Boolean): Boolean", "member" : "scala.collection.LinearSeqOptimized.forall", "link" : "menu_commands\/CountCard$.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Int) ⇒ U): Unit", "member" : "scala.collection.LinearSeqOptimized.foreach", "link" : "menu_commands\/CountCard$.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "seq", "tail" : "(): LinearSeq[Int]", "member" : "scala.collection.mutable.LinearSeq.seq", "link" : "menu_commands\/CountCard$.html#seq:scala.collection.mutable.LinearSeq[A]", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: GenSeq[B])(p: (Int, B) ⇒ Boolean): Boolean", "member" : "scala.collection.LinearSeqLike.corresponds", "link" : "menu_commands\/CountCard$.html#corresponds[B](that:scala.collection.GenSeq[B])(p:(A,B)=>Boolean):Boolean", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.collection.LinearSeqLike.hashCode", "link" : "menu_commands\/CountCard$.html#hashCode():Int", "kind" : "def"}, {"label" : "toCollection", "tail" : "(repr: Queue[Int]): LinearSeq[Int]", "member" : "scala.collection.LinearSeqLike.toCollection", "link" : "menu_commands\/CountCard$.html#toCollection(repr:Repr):scala.collection.LinearSeq[A]", "kind" : "def"}, {"label" : "thisCollection", "tail" : "(): LinearSeq[Int]", "member" : "scala.collection.LinearSeqLike.thisCollection", "link" : "menu_commands\/CountCard$.html#thisCollection:scala.collection.LinearSeq[A]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (Int) ⇒ Int): CountCard.this.type", "member" : "scala.collection.mutable.SeqLike.transform", "link" : "menu_commands\/CountCard$.html#transform(f:A=>A):SeqLike.this.type", "kind" : "def"}, {"label" : "parCombiner", "tail" : "(): Combiner[Int, ParSeq[Int]]", "member" : "scala.collection.mutable.SeqLike.parCombiner", "link" : "menu_commands\/CountCard$.html#parCombiner:scala.collection.parallel.Combiner[A,scala.collection.parallel.mutable.ParSeq[A]]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.SeqLike.toString", "link" : "menu_commands\/CountCard$.html#toString():String", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): SeqView[Int, Queue[Int]]", "member" : "scala.collection.SeqLike.view", "link" : "menu_commands\/CountCard$.html#view(from:Int,until:Int):scala.collection.SeqView[A,Repr]", "kind" : "def"}, {"label" : "view", "tail" : "(): SeqView[Int, Queue[Int]]", "member" : "scala.collection.SeqLike.view", "link" : "menu_commands\/CountCard$.html#view:scala.collection.SeqView[A,Repr]", "kind" : "def"}, {"label" : "indices", "tail" : "(): Range", "member" : "scala.collection.SeqLike.indices", "link" : "menu_commands\/CountCard$.html#indices:scala.collection.immutable.Range", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[Int]", "member" : "scala.collection.SeqLike.toSeq", "link" : "menu_commands\/CountCard$.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "sorted", "tail" : "(ord: Ordering[B]): Queue[Int]", "member" : "scala.collection.SeqLike.sorted", "link" : "menu_commands\/CountCard$.html#sorted[B>:A](implicitord:scala.math.Ordering[B]):Repr", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (Int) ⇒ B)(ord: Ordering[B]): Queue[Int]", "member" : "scala.collection.SeqLike.sortBy", "link" : "menu_commands\/CountCard$.html#sortBy[B](f:A=>B)(implicitord:scala.math.Ordering[B]):Repr", "kind" : "def"}, {"label" : "sortWith", "tail" : "(lt: (Int, Int) ⇒ Boolean): Queue[Int]", "member" : "scala.collection.SeqLike.sortWith", "link" : "menu_commands\/CountCard$.html#sortWith(lt:(A,A)=>Boolean):Repr", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: B)(bf: CanBuildFrom[Queue[Int], B, That]): That", "member" : "scala.collection.SeqLike.padTo", "link" : "menu_commands\/CountCard$.html#padTo[B>:A,That](len:Int,elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : ":+", "tail" : "(elem: B)(bf: CanBuildFrom[Queue[Int], B, That]): That", "member" : "scala.collection.SeqLike.:+", "link" : "menu_commands\/CountCard$.html#:+[B>:A,That](elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "+:", "tail" : "(elem: B)(bf: CanBuildFrom[Queue[Int], B, That]): That", "member" : "scala.collection.SeqLike.+:", "link" : "menu_commands\/CountCard$.html#+:[B>:A,That](elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "updated", "tail" : "(index: Int, elem: B)(bf: CanBuildFrom[Queue[Int], B, That]): That", "member" : "scala.collection.SeqLike.updated", "link" : "menu_commands\/CountCard$.html#updated[B>:A,That](index:Int,elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, patch: GenSeq[B], replaced: Int)(bf: CanBuildFrom[Queue[Int], B, That]): That", "member" : "scala.collection.SeqLike.patch", "link" : "menu_commands\/CountCard$.html#patch[B>:A,That](from:Int,patch:scala.collection.GenSeq[B],replaced:Int)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Queue[Int]", "member" : "scala.collection.SeqLike.distinct", "link" : "menu_commands\/CountCard$.html#distinct:Repr", "kind" : "def"}, {"label" : "intersect", "tail" : "(that: GenSeq[B]): Queue[Int]", "member" : "scala.collection.SeqLike.intersect", "link" : "menu_commands\/CountCard$.html#intersect[B>:A](that:scala.collection.GenSeq[B]):Repr", "kind" : "def"}, {"label" : "diff", "tail" : "(that: GenSeq[B]): Queue[Int]", "member" : "scala.collection.SeqLike.diff", "link" : "menu_commands\/CountCard$.html#diff[B>:A](that:scala.collection.GenSeq[B]):Repr", "kind" : "def"}, {"label" : "union", "tail" : "(that: GenSeq[B])(bf: CanBuildFrom[Queue[Int], B, That]): That", "member" : "scala.collection.SeqLike.union", "link" : "menu_commands\/CountCard$.html#union[B>:A,That](that:scala.collection.GenSeq[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "containsSlice", "tail" : "(that: GenSeq[B]): Boolean", "member" : "scala.collection.SeqLike.containsSlice", "link" : "menu_commands\/CountCard$.html#containsSlice[B](that:scala.collection.GenSeq[B]):Boolean", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: GenSeq[B], end: Int): Int", "member" : "scala.collection.SeqLike.lastIndexOfSlice", "link" : "menu_commands\/CountCard$.html#lastIndexOfSlice[B>:A](that:scala.collection.GenSeq[B],end:Int):Int", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: GenSeq[B]): Int", "member" : "scala.collection.SeqLike.lastIndexOfSlice", "link" : "menu_commands\/CountCard$.html#lastIndexOfSlice[B>:A](that:scala.collection.GenSeq[B]):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: GenSeq[B], from: Int): Int", "member" : "scala.collection.SeqLike.indexOfSlice", "link" : "menu_commands\/CountCard$.html#indexOfSlice[B>:A](that:scala.collection.GenSeq[B],from:Int):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: GenSeq[B]): Int", "member" : "scala.collection.SeqLike.indexOfSlice", "link" : "menu_commands\/CountCard$.html#indexOfSlice[B>:A](that:scala.collection.GenSeq[B]):Int", "kind" : "def"}, {"label" : "endsWith", "tail" : "(that: GenSeq[B]): Boolean", "member" : "scala.collection.SeqLike.endsWith", "link" : "menu_commands\/CountCard$.html#endsWith[B](that:scala.collection.GenSeq[B]):Boolean", "kind" : "def"}, {"label" : "startsWith", "tail" : "(that: GenSeq[B], offset: Int): Boolean", "member" : "scala.collection.SeqLike.startsWith", "link" : "menu_commands\/CountCard$.html#startsWith[B](that:scala.collection.GenSeq[B],offset:Int):Boolean", "kind" : "def"}, {"label" : "reverseIterator", "tail" : "(): Iterator[Int]", "member" : "scala.collection.SeqLike.reverseIterator", "link" : "menu_commands\/CountCard$.html#reverseIterator:Iterator[A]", "kind" : "def"}, {"label" : "reverseMap", "tail" : "(f: (Int) ⇒ B)(bf: CanBuildFrom[Queue[Int], B, That]): That", "member" : "scala.collection.SeqLike.reverseMap", "link" : "menu_commands\/CountCard$.html#reverseMap[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "reverse", "tail" : "(): Queue[Int]", "member" : "scala.collection.SeqLike.reverse", "link" : "menu_commands\/CountCard$.html#reverse:Repr", "kind" : "def"}, {"label" : "combinations", "tail" : "(n: Int): Iterator[Queue[Int]]", "member" : "scala.collection.SeqLike.combinations", "link" : "menu_commands\/CountCard$.html#combinations(n:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "permutations", "tail" : "(): Iterator[Queue[Int]]", "member" : "scala.collection.SeqLike.permutations", "link" : "menu_commands\/CountCard$.html#permutations:Iterator[Repr]", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.SeqLike.size", "link" : "menu_commands\/CountCard$.html#size:Int", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "scala.collection.GenSeqLike.equals", "link" : "menu_commands\/CountCard$.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "startsWith", "tail" : "(that: GenSeq[B]): Boolean", "member" : "scala.collection.GenSeqLike.startsWith", "link" : "menu_commands\/CountCard$.html#startsWith[B](that:scala.collection.GenSeq[B]):Boolean", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (Int) ⇒ Boolean): Int", "member" : "scala.collection.GenSeqLike.lastIndexWhere", "link" : "menu_commands\/CountCard$.html#lastIndexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(elem: B, end: Int): Int", "member" : "scala.collection.GenSeqLike.lastIndexOf", "link" : "menu_commands\/CountCard$.html#lastIndexOf[B>:A](elem:B,end:Int):Int", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.GenSeqLike.lastIndexOf", "link" : "menu_commands\/CountCard$.html#lastIndexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.GenSeqLike.indexOf", "link" : "menu_commands\/CountCard$.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.GenSeqLike.indexOf", "link" : "menu_commands\/CountCard$.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Int) ⇒ Boolean): Int", "member" : "scala.collection.GenSeqLike.indexWhere", "link" : "menu_commands\/CountCard$.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "prefixLength", "tail" : "(p: (Int) ⇒ Boolean): Int", "member" : "scala.collection.GenSeqLike.prefixLength", "link" : "menu_commands\/CountCard$.html#prefixLength(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "runWith", "tail" : "(action: (Int) ⇒ U): (Int) ⇒ Boolean", "member" : "scala.PartialFunction.runWith", "link" : "menu_commands\/CountCard$.html#runWith[U](action:B=>U):A=>Boolean", "kind" : "def"}, {"label" : "applyOrElse", "tail" : "(x: A1, default: (A1) ⇒ B1): B1", "member" : "scala.PartialFunction.applyOrElse", "link" : "menu_commands\/CountCard$.html#applyOrElse[A1<:A,B1>:B](x:A1,default:A1=>B1):B1", "kind" : "def"}, {"label" : "lift", "tail" : "(): (Int) ⇒ Option[Int]", "member" : "scala.PartialFunction.lift", "link" : "menu_commands\/CountCard$.html#lift:A=>Option[B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: (Int) ⇒ C): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "menu_commands\/CountCard$.html#andThen[C](k:B=>C):PartialFunction[A,C]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: PartialFunction[A1, B1]): PartialFunction[A1, B1]", "member" : "scala.PartialFunction.orElse", "link" : "menu_commands\/CountCard$.html#orElse[A1<:A,B1>:B](that:PartialFunction[A1,B1]):PartialFunction[A1,B1]", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Int): (A) ⇒ Int", "member" : "scala.Function1.compose", "link" : "menu_commands\/CountCard$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.IterableLike.canEqual", "link" : "menu_commands\/CountCard$.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[Int]", "member" : "scala.collection.IterableLike.toStream", "link" : "menu_commands\/CountCard$.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(bf: CanBuildFrom[Queue[Int], (A1, Int), That]): That", "member" : "scala.collection.IterableLike.zipWithIndex", "link" : "menu_commands\/CountCard$.html#zipWithIndex[A1>:A,That](implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,Int),That]):That", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: GenIterable[B], thisElem: A1, thatElem: B)(bf: CanBuildFrom[Queue[Int], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zipAll", "link" : "menu_commands\/CountCard$.html#zipAll[B,A1>:A,That](that:scala.collection.GenIterable[B],thisElem:A1,thatElem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "zip", "tail" : "(that: GenIterable[B])(bf: CanBuildFrom[Queue[Int], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zip", "link" : "menu_commands\/CountCard$.html#zip[A1>:A,B,That](that:scala.collection.GenIterable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.IterableLike.copyToArray", "link" : "menu_commands\/CountCard$.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): Queue[Int]", "member" : "scala.collection.IterableLike.takeRight", "link" : "menu_commands\/CountCard$.html#takeRight(n:Int):Repr", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[Queue[Int]]", "member" : "scala.collection.IterableLike.sliding", "link" : "menu_commands\/CountCard$.html#sliding(size:Int,step:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[Queue[Int]]", "member" : "scala.collection.IterableLike.sliding", "link" : "menu_commands\/CountCard$.html#sliding(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[Queue[Int]]", "member" : "scala.collection.IterableLike.grouped", "link" : "menu_commands\/CountCard$.html#grouped(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Int]", "member" : "scala.collection.IterableLike.toIterator", "link" : "menu_commands\/CountCard$.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[Int]", "member" : "scala.collection.IterableLike.toIterable", "link" : "menu_commands\/CountCard$.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "transpose", "tail" : "(asTraversable: (Int) ⇒ GenTraversableOnce[B]): Queue[Queue[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.transpose", "link" : "menu_commands\/CountCard$.html#transpose[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asTraversable: (Int) ⇒ GenTraversableOnce[B]): Queue[B]", "member" : "scala.collection.generic.GenericTraversableTemplate.flatten", "link" : "menu_commands\/CountCard$.html#flatten[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Int) ⇒ (A1, A2, A3)): (Queue[A1], Queue[A2], Queue[A3])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip3", "link" : "menu_commands\/CountCard$.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Int) ⇒ (A1, A2)): (Queue[A1], Queue[A2])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip", "link" : "menu_commands\/CountCard$.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "genericBuilder", "tail" : "(): Builder[B, Queue[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.genericBuilder", "link" : "menu_commands\/CountCard$.html#genericBuilder[B]:scala.collection.mutable.Builder[B,CC[B]]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Int) ⇒ Boolean): FilterMonadic[Int, Queue[Int]]", "member" : "scala.collection.TraversableLike.withFilter", "link" : "menu_commands\/CountCard$.html#withFilter(p:A=>Boolean):scala.collection.generic.FilterMonadic[A,Repr]", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.TraversableLike.stringPrefix", "link" : "menu_commands\/CountCard$.html#stringPrefix:String", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, Int, Col[Int]]): Col[Int]", "member" : "scala.collection.TraversableLike.to", "link" : "menu_commands\/CountCard$.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[Int]", "member" : "scala.collection.TraversableLike.toTraversable", "link" : "menu_commands\/CountCard$.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[Queue[Int]]", "member" : "scala.collection.TraversableLike.inits", "link" : "menu_commands\/CountCard$.html#inits:Iterator[Repr]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[Queue[Int]]", "member" : "scala.collection.TraversableLike.tails", "link" : "menu_commands\/CountCard$.html#tails:Iterator[Repr]", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Queue[Int], Queue[Int])", "member" : "scala.collection.TraversableLike.splitAt", "link" : "menu_commands\/CountCard$.html#splitAt(n:Int):(Repr,Repr)", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Int) ⇒ Boolean): Queue[Int]", "member" : "scala.collection.TraversableLike.dropWhile", "link" : "menu_commands\/CountCard$.html#dropWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "init", "tail" : "(): Queue[Int]", "member" : "scala.collection.TraversableLike.init", "link" : "menu_commands\/CountCard$.html#init:Repr", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[Int]", "member" : "scala.collection.TraversableLike.lastOption", "link" : "menu_commands\/CountCard$.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Int]", "member" : "scala.collection.TraversableLike.headOption", "link" : "menu_commands\/CountCard$.html#headOption:Option[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Int, B) ⇒ B)(bf: CanBuildFrom[Queue[Int], B, That]): That", "member" : "scala.collection.TraversableLike.scanRight", "link" : "menu_commands\/CountCard$.html#scanRight[B,That](z:B)(op:(A,B)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Int) ⇒ B)(bf: CanBuildFrom[Queue[Int], B, That]): That", "member" : "scala.collection.TraversableLike.scanLeft", "link" : "menu_commands\/CountCard$.html#scanLeft[B,That](z:B)(op:(B,A)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) ⇒ B)(cbf: CanBuildFrom[Queue[Int], B, That]): That", "member" : "scala.collection.TraversableLike.scan", "link" : "menu_commands\/CountCard$.html#scan[B>:A,That](z:B)(op:(B,B)=>B)(implicitcbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Int) ⇒ K): Map[K, Queue[Int]]", "member" : "scala.collection.TraversableLike.groupBy", "link" : "menu_commands\/CountCard$.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,Repr]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Int) ⇒ Boolean): (Queue[Int], Queue[Int])", "member" : "scala.collection.TraversableLike.partition", "link" : "menu_commands\/CountCard$.html#partition(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Int, B])(bf: CanBuildFrom[Queue[Int], B, That]): That", "member" : "scala.collection.TraversableLike.collect", "link" : "menu_commands\/CountCard$.html#collect[B,That](pf:PartialFunction[A,B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (Int) ⇒ Boolean): Queue[Int]", "member" : "scala.collection.TraversableLike.filterNot", "link" : "menu_commands\/CountCard$.html#filterNot(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Int) ⇒ Boolean): Queue[Int]", "member" : "scala.collection.TraversableLike.filter", "link" : "menu_commands\/CountCard$.html#filter(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Int) ⇒ GenTraversableOnce[B])(bf: CanBuildFrom[Queue[Int], B, That]): That", "member" : "scala.collection.TraversableLike.flatMap", "link" : "menu_commands\/CountCard$.html#flatMap[B,That](f:A=>scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Int) ⇒ B)(bf: CanBuildFrom[Queue[Int], B, That]): That", "member" : "scala.collection.TraversableLike.map", "link" : "menu_commands\/CountCard$.html#map[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: Traversable[B])(bf: CanBuildFrom[Queue[Int], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "menu_commands\/CountCard$.html#++:[B>:A,That](that:Traversable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: TraversableOnce[B])(bf: CanBuildFrom[Queue[Int], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "menu_commands\/CountCard$.html#++:[B>:A,That](that:scala.collection.TraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++", "tail" : "(that: GenTraversableOnce[B])(bf: CanBuildFrom[Queue[Int], B, That]): That", "member" : "scala.collection.TraversableLike.++", "link" : "menu_commands\/CountCard$.html#++[B>:A,That](that:scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.hasDefiniteSize", "link" : "menu_commands\/CountCard$.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.isTraversableAgain", "link" : "menu_commands\/CountCard$.html#isTraversableAgain:Boolean", "kind" : "final def"}, {"label" : "repr", "tail" : "(): Queue[Int]", "member" : "scala.collection.TraversableLike.repr", "link" : "menu_commands\/CountCard$.html#repr:Repr", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "scala.collection.TraversableLike.Self", "link" : "menu_commands\/CountCard$.html#Self=Repr", "kind" : "type"}, {"label" : "par", "tail" : "(): ParSeq[Int]", "member" : "scala.collection.Parallelizable.par", "link" : "menu_commands\/CountCard$.html#par:ParRepr", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "menu_commands\/CountCard$.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "menu_commands\/CountCard$.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "menu_commands\/CountCard$.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "menu_commands\/CountCard$.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "menu_commands\/CountCard$.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "menu_commands\/CountCard$.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Int, (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "menu_commands\/CountCard$.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[Int]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "menu_commands\/CountCard$.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "menu_commands\/CountCard$.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "menu_commands\/CountCard$.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[Int]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "menu_commands\/CountCard$.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "menu_commands\/CountCard$.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "menu_commands\/CountCard$.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "menu_commands\/CountCard$.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "menu_commands\/CountCard$.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Int) ⇒ B)(cmp: Ordering[B]): Int", "member" : "scala.collection.TraversableOnce.minBy", "link" : "menu_commands\/CountCard$.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Int) ⇒ B)(cmp: Ordering[B]): Int", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "menu_commands\/CountCard$.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): Int", "member" : "scala.collection.TraversableOnce.max", "link" : "menu_commands\/CountCard$.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): Int", "member" : "scala.collection.TraversableOnce.min", "link" : "menu_commands\/CountCard$.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "menu_commands\/CountCard$.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "menu_commands\/CountCard$.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, Int) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "menu_commands\/CountCard$.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "menu_commands\/CountCard$.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "menu_commands\/CountCard$.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "menu_commands\/CountCard$.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Int, B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "menu_commands\/CountCard$.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Int) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "menu_commands\/CountCard$.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Int, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "menu_commands\/CountCard$.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Int) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "menu_commands\/CountCard$.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Int, B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "menu_commands\/CountCard$.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Int) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "menu_commands\/CountCard$.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "menu_commands\/CountCard$.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[Int]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "menu_commands\/CountCard$.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "menu_commands\/CountCard$.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "menu_commands\/CountCard$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "menu_commands\/CountCard$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "menu_commands\/CountCard$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "menu_commands\/CountCard$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "menu_commands\/CountCard$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "menu_commands\/CountCard$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "menu_commands\/CountCard$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/CountCard$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/CountCard$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/CountCard$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "menu_commands\/CountCard$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "menu_commands\/CountCard$.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "menu_commands\/CountCard$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "menu_commands\/CountCard$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "menu_commands\/CountCard$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "menu_commands.Deck", "shortDescription" : "A deck to deal at cards with at the start of the game, made from an arraybuffer.", "object" : "menu_commands\/Deck$.html", "members_object" : [{"label" : "Elements", "tail" : "", "member" : "scala.collection.IndexedSeqLike.Elements", "link" : "menu_commands\/Deck$.html#ElementsextendsAbstractIterator[A]withBufferedIterator[A]withSerializable", "kind" : "class"}, {"label" : "WithFilter", "tail" : "", "member" : "scala.collection.TraversableLike.WithFilter", "link" : "menu_commands\/Deck$.html#WithFilterextendsFilterMonadic[A,Repr]", "kind" : "class"}, {"label" : "deal", "tail" : "(): Card", "member" : "menu_commands.Deck.deal", "link" : "menu_commands\/Deck$.html#deal:menu_commands.Card", "kind" : "def"}, {"label" : "cardsLEFTint", "tail" : "(): Int", "member" : "menu_commands.Deck.cardsLEFTint", "link" : "menu_commands\/Deck$.html#cardsLEFTint:Int", "kind" : "def"}, {"label" : "cardsLEFTstr", "tail" : "(): String", "member" : "menu_commands.Deck.cardsLEFTstr", "link" : "menu_commands\/Deck$.html#cardsLEFTstr:String", "kind" : "def"}, {"label" : "inITrand", "tail" : "(): Unit", "member" : "menu_commands.Deck.inITrand", "link" : "menu_commands\/Deck$.html#inITrand:Unit", "kind" : "def"}, {"label" : "inIT", "tail" : "(): Unit", "member" : "menu_commands.Deck.inIT", "link" : "menu_commands\/Deck$.html#inIT:Unit", "kind" : "def"}, {"label" : "shuffle", "tail" : "(a: Int, b: Int): Unit", "member" : "menu_commands.Deck.shuffle", "link" : "menu_commands\/Deck$.html#shuffle(a:Int,b:Int):Unit", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.mutable.ArrayBuffer.stringPrefix", "link" : "menu_commands\/Deck$.html#stringPrefix:String", "kind" : "def"}, {"label" : "result", "tail" : "(): ArrayBuffer[Card]", "member" : "scala.collection.mutable.ArrayBuffer.result", "link" : "menu_commands\/Deck$.html#result():scala.collection.mutable.ArrayBuffer[A]", "kind" : "def"}, {"label" : "remove", "tail" : "(n: Int): Card", "member" : "scala.collection.mutable.ArrayBuffer.remove", "link" : "menu_commands\/Deck$.html#remove(n:Int):A", "kind" : "def"}, {"label" : "remove", "tail" : "(n: Int, count: Int): Unit", "member" : "scala.collection.mutable.ArrayBuffer.remove", "link" : "menu_commands\/Deck$.html#remove(n:Int,count:Int):Unit", "kind" : "def"}, {"label" : "insertAll", "tail" : "(n: Int, seq: Traversable[Card]): Unit", "member" : "scala.collection.mutable.ArrayBuffer.insertAll", "link" : "menu_commands\/Deck$.html#insertAll(n:Int,seq:Traversable[A]):Unit", "kind" : "def"}, {"label" : "++=:", "tail" : "(xs: TraversableOnce[Card]): Deck.this.type", "member" : "scala.collection.mutable.ArrayBuffer.++=:", "link" : "menu_commands\/Deck$.html#++=:(xs:scala.collection.TraversableOnce[A]):ArrayBuffer.this.type", "kind" : "def"}, {"label" : "+=:", "tail" : "(elem: Card): Deck.this.type", "member" : "scala.collection.mutable.ArrayBuffer.+=:", "link" : "menu_commands\/Deck$.html#+=:(elem:A):ArrayBuffer.this.type", "kind" : "def"}, {"label" : "++=", "tail" : "(xs: TraversableOnce[Card]): Deck.this.type", "member" : "scala.collection.mutable.ArrayBuffer.++=", "link" : "menu_commands\/Deck$.html#++=(xs:scala.collection.TraversableOnce[A]):ArrayBuffer.this.type", "kind" : "def"}, {"label" : "+=", "tail" : "(elem: Card): Deck.this.type", "member" : "scala.collection.mutable.ArrayBuffer.+=", "link" : "menu_commands\/Deck$.html#+=(elem:A):ArrayBuffer.this.type", "kind" : "def"}, {"label" : "par", "tail" : "(): ParArray[Card]", "member" : "scala.collection.mutable.ArrayBuffer.par", "link" : "menu_commands\/Deck$.html#par:scala.collection.parallel.mutable.ParArray[A]", "kind" : "def"}, {"label" : "sizeHint", "tail" : "(len: Int): Unit", "member" : "scala.collection.mutable.ArrayBuffer.sizeHint", "link" : "menu_commands\/Deck$.html#sizeHint(len:Int):Unit", "kind" : "def"}, {"label" : "clear", "tail" : "(): Unit", "member" : "scala.collection.mutable.ArrayBuffer.clear", "link" : "menu_commands\/Deck$.html#clear():Unit", "kind" : "def"}, {"label" : "companion", "tail" : "(): GenericCompanion[ArrayBuffer]", "member" : "scala.collection.mutable.ArrayBuffer.companion", "link" : "menu_commands\/Deck$.html#companion:scala.collection.generic.GenericCompanion[scala.collection.mutable.ArrayBuffer]", "kind" : "def"}, {"label" : "initialSize", "tail" : ": Int", "member" : "scala.collection.mutable.ArrayBuffer.initialSize", "link" : "menu_commands\/Deck$.html#initialSize:Int", "kind" : "val"}, {"label" : "parCombiner", "tail" : "(): Combiner[Card, ParArray[Card]]", "member" : "scala.collection.CustomParallelizable.parCombiner", "link" : "menu_commands\/Deck$.html#parCombiner:scala.collection.parallel.Combiner[A,ParRepr]", "kind" : "def"}, {"label" : "copy", "tail" : "(m: Int, n: Int, len: Int): Unit", "member" : "scala.collection.mutable.ResizableArray.copy", "link" : "menu_commands\/Deck$.html#copy(m:Int,n:Int,len:Int):Unit", "kind" : "def"}, {"label" : "swap", "tail" : "(a: Int, b: Int): Unit", "member" : "scala.collection.mutable.ResizableArray.swap", "link" : "menu_commands\/Deck$.html#swap(a:Int,b:Int):Unit", "kind" : "def"}, {"label" : "ensureSize", "tail" : "(n: Int): Unit", "member" : "scala.collection.mutable.ResizableArray.ensureSize", "link" : "menu_commands\/Deck$.html#ensureSize(n:Int):Unit", "kind" : "def"}, {"label" : "reduceToSize", "tail" : "(sz: Int): Unit", "member" : "scala.collection.mutable.ResizableArray.reduceToSize", "link" : "menu_commands\/Deck$.html#reduceToSize(sz:Int):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.mutable.ResizableArray.copyToArray", "link" : "menu_commands\/Deck$.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Card) ⇒ U): Unit", "member" : "scala.collection.mutable.ResizableArray.foreach", "link" : "menu_commands\/Deck$.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "update", "tail" : "(idx: Int, elem: Card): Unit", "member" : "scala.collection.mutable.ResizableArray.update", "link" : "menu_commands\/Deck$.html#update(idx:Int,elem:A):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(idx: Int): Card", "member" : "scala.collection.mutable.ResizableArray.apply", "link" : "menu_commands\/Deck$.html#apply(idx:Int):A", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.mutable.ResizableArray.length", "link" : "menu_commands\/Deck$.html#length:Int", "kind" : "def"}, {"label" : "size0", "tail" : ": Int", "member" : "scala.collection.mutable.ResizableArray.size0", "link" : "menu_commands\/Deck$.html#size0:Int", "kind" : "val"}, {"label" : "array", "tail" : ": Array[AnyRef]", "member" : "scala.collection.mutable.ResizableArray.array", "link" : "menu_commands\/Deck$.html#array:Array[AnyRef]", "kind" : "val"}, {"label" : "seq", "tail" : "(): IndexedSeq[Card]", "member" : "scala.collection.mutable.IndexedSeq.seq", "link" : "menu_commands\/Deck$.html#seq:scala.collection.mutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "mapResult", "tail" : "(f: (ArrayBuffer[Card]) ⇒ NewTo): Builder[Card, NewTo]", "member" : "scala.collection.mutable.Builder.mapResult", "link" : "menu_commands\/Deck$.html#mapResult[NewTo](f:To=>NewTo):scala.collection.mutable.Builder[Elem,NewTo]", "kind" : "def"}, {"label" : "sizeHintBounded", "tail" : "(size: Int, boundingColl: TraversableLike[_, _]): Unit", "member" : "scala.collection.mutable.Builder.sizeHintBounded", "link" : "menu_commands\/Deck$.html#sizeHintBounded(size:Int,boundingColl:scala.collection.TraversableLike[_,_]):Unit", "kind" : "def"}, {"label" : "sizeHint", "tail" : "(coll: TraversableLike[_, _], delta: Int): Unit", "member" : "scala.collection.mutable.Builder.sizeHint", "link" : "menu_commands\/Deck$.html#sizeHint(coll:scala.collection.TraversableLike[_,_],delta:Int):Unit", "kind" : "def"}, {"label" : "sizeHint", "tail" : "(coll: TraversableLike[_, _]): Unit", "member" : "scala.collection.mutable.Builder.sizeHint", "link" : "menu_commands\/Deck$.html#sizeHint(coll:scala.collection.TraversableLike[_,_]):Unit", "kind" : "def"}, {"label" : "endsWith", "tail" : "(that: GenSeq[B]): Boolean", "member" : "scala.collection.IndexedSeqOptimized.endsWith", "link" : "menu_commands\/Deck$.html#endsWith[B](that:scala.collection.GenSeq[B]):Boolean", "kind" : "def"}, {"label" : "startsWith", "tail" : "(that: GenSeq[B], offset: Int): Boolean", "member" : "scala.collection.IndexedSeqOptimized.startsWith", "link" : "menu_commands\/Deck$.html#startsWith[B](that:scala.collection.GenSeq[B],offset:Int):Boolean", "kind" : "def"}, {"label" : "reverseIterator", "tail" : "(): Iterator[Card]", "member" : "scala.collection.IndexedSeqOptimized.reverseIterator", "link" : "menu_commands\/Deck$.html#reverseIterator:Iterator[A]", "kind" : "def"}, {"label" : "reverse", "tail" : "(): ArrayBuffer[Card]", "member" : "scala.collection.IndexedSeqOptimized.reverse", "link" : "menu_commands\/Deck$.html#reverse:Repr", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (Card) ⇒ Boolean, end: Int): Int", "member" : "scala.collection.IndexedSeqOptimized.lastIndexWhere", "link" : "menu_commands\/Deck$.html#lastIndexWhere(p:A=>Boolean,end:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Card) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.IndexedSeqOptimized.indexWhere", "link" : "menu_commands\/Deck$.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "segmentLength", "tail" : "(p: (Card) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.IndexedSeqOptimized.segmentLength", "link" : "menu_commands\/Deck$.html#segmentLength(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "lengthCompare", "tail" : "(len: Int): Int", "member" : "scala.collection.IndexedSeqOptimized.lengthCompare", "link" : "menu_commands\/Deck$.html#lengthCompare(len:Int):Int", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: GenIterable[B]): Boolean", "member" : "scala.collection.IndexedSeqOptimized.sameElements", "link" : "menu_commands\/Deck$.html#sameElements[B>:A](that:scala.collection.GenIterable[B]):Boolean", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Card) ⇒ Boolean): (ArrayBuffer[Card], ArrayBuffer[Card])", "member" : "scala.collection.IndexedSeqOptimized.span", "link" : "menu_commands\/Deck$.html#span(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Card) ⇒ Boolean): ArrayBuffer[Card]", "member" : "scala.collection.IndexedSeqOptimized.dropWhile", "link" : "menu_commands\/Deck$.html#dropWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Card) ⇒ Boolean): ArrayBuffer[Card]", "member" : "scala.collection.IndexedSeqOptimized.takeWhile", "link" : "menu_commands\/Deck$.html#takeWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (ArrayBuffer[Card], ArrayBuffer[Card])", "member" : "scala.collection.IndexedSeqOptimized.splitAt", "link" : "menu_commands\/Deck$.html#splitAt(n:Int):(Repr,Repr)", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): ArrayBuffer[Card]", "member" : "scala.collection.IndexedSeqOptimized.dropRight", "link" : "menu_commands\/Deck$.html#dropRight(n:Int):Repr", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): ArrayBuffer[Card]", "member" : "scala.collection.IndexedSeqOptimized.takeRight", "link" : "menu_commands\/Deck$.html#takeRight(n:Int):Repr", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): ArrayBuffer[Card]", "member" : "scala.collection.IndexedSeqOptimized.drop", "link" : "menu_commands\/Deck$.html#drop(n:Int):Repr", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): ArrayBuffer[Card]", "member" : "scala.collection.IndexedSeqOptimized.take", "link" : "menu_commands\/Deck$.html#take(n:Int):Repr", "kind" : "def"}, {"label" : "init", "tail" : "(): ArrayBuffer[Card]", "member" : "scala.collection.IndexedSeqOptimized.init", "link" : "menu_commands\/Deck$.html#init:Repr", "kind" : "def"}, {"label" : "last", "tail" : "(): Card", "member" : "scala.collection.IndexedSeqOptimized.last", "link" : "menu_commands\/Deck$.html#last:A", "kind" : "def"}, {"label" : "tail", "tail" : "(): ArrayBuffer[Card]", "member" : "scala.collection.IndexedSeqOptimized.tail", "link" : "menu_commands\/Deck$.html#tail:Repr", "kind" : "def"}, {"label" : "head", "tail" : "(): Card", "member" : "scala.collection.IndexedSeqOptimized.head", "link" : "menu_commands\/Deck$.html#head:A", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): ArrayBuffer[Card]", "member" : "scala.collection.IndexedSeqOptimized.slice", "link" : "menu_commands\/Deck$.html#slice(from:Int,until:Int):Repr", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(bf: CanBuildFrom[ArrayBuffer[Card], (A1, Int), That]): That", "member" : "scala.collection.IndexedSeqOptimized.zipWithIndex", "link" : "menu_commands\/Deck$.html#zipWithIndex[A1>:A,That](implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,Int),That]):That", "kind" : "def"}, {"label" : "zip", "tail" : "(that: GenIterable[B])(bf: CanBuildFrom[ArrayBuffer[Card], (A1, B), That]): That", "member" : "scala.collection.IndexedSeqOptimized.zip", "link" : "menu_commands\/Deck$.html#zip[A1>:A,B,That](that:scala.collection.GenIterable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Card, B) ⇒ B): B", "member" : "scala.collection.IndexedSeqOptimized.reduceRight", "link" : "menu_commands\/Deck$.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Card) ⇒ B): B", "member" : "scala.collection.IndexedSeqOptimized.reduceLeft", "link" : "menu_commands\/Deck$.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Card, B) ⇒ B): B", "member" : "scala.collection.IndexedSeqOptimized.foldRight", "link" : "menu_commands\/Deck$.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Card) ⇒ B): B", "member" : "scala.collection.IndexedSeqOptimized.foldLeft", "link" : "menu_commands\/Deck$.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Card) ⇒ Boolean): Option[Card]", "member" : "scala.collection.IndexedSeqOptimized.find", "link" : "menu_commands\/Deck$.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Card) ⇒ Boolean): Boolean", "member" : "scala.collection.IndexedSeqOptimized.exists", "link" : "menu_commands\/Deck$.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Card) ⇒ Boolean): Boolean", "member" : "scala.collection.IndexedSeqOptimized.forall", "link" : "menu_commands\/Deck$.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IndexedSeqOptimized.isEmpty", "link" : "menu_commands\/Deck$.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): IndexedSeqView[Card, ArrayBuffer[Card]]", "member" : "scala.collection.mutable.IndexedSeqLike.view", "link" : "menu_commands\/Deck$.html#view(from:Int,until:Int):scala.collection.mutable.IndexedSeqView[A,Repr]", "kind" : "def"}, {"label" : "view", "tail" : "(): IndexedSeqView[Card, ArrayBuffer[Card]]", "member" : "scala.collection.mutable.IndexedSeqLike.view", "link" : "menu_commands\/Deck$.html#view:scala.collection.mutable.IndexedSeqView[A,Repr]", "kind" : "def"}, {"label" : "toCollection", "tail" : "(repr: ArrayBuffer[Card]): IndexedSeq[Card]", "member" : "scala.collection.mutable.IndexedSeqLike.toCollection", "link" : "menu_commands\/Deck$.html#toCollection(repr:Repr):scala.collection.mutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "thisCollection", "tail" : "(): IndexedSeq[Card]", "member" : "scala.collection.mutable.IndexedSeqLike.thisCollection", "link" : "menu_commands\/Deck$.html#thisCollection:scala.collection.mutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.IndexedSeqLike.sizeHintIfCheap", "link" : "menu_commands\/Deck$.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[A1]", "member" : "scala.collection.IndexedSeqLike.toBuffer", "link" : "menu_commands\/Deck$.html#toBuffer[A1>:A]:scala.collection.mutable.Buffer[A1]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[Card]", "member" : "scala.collection.IndexedSeqLike.iterator", "link" : "menu_commands\/Deck$.html#iterator:Iterator[A]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.collection.IndexedSeqLike.hashCode", "link" : "menu_commands\/Deck$.html#hashCode():Int", "kind" : "def"}, {"label" : "clone", "tail" : "(): ArrayBuffer[Card]", "member" : "scala.collection.mutable.BufferLike.clone", "link" : "menu_commands\/Deck$.html#clone():This", "kind" : "def"}, {"label" : "--", "tail" : "(xs: GenTraversableOnce[Card]): ArrayBuffer[Card]", "member" : "scala.collection.mutable.BufferLike.--", "link" : "menu_commands\/Deck$.html#--(xs:scala.collection.GenTraversableOnce[A]):This", "kind" : "def"}, {"label" : "-", "tail" : "(elem1: Card, elem2: Card, elems: Card*): ArrayBuffer[Card]", "member" : "scala.collection.mutable.BufferLike.-", "link" : "menu_commands\/Deck$.html#-(elem1:A,elem2:A,elems:A*):This", "kind" : "def"}, {"label" : "-", "tail" : "(elem: Card): ArrayBuffer[Card]", "member" : "scala.collection.mutable.BufferLike.-", "link" : "menu_commands\/Deck$.html#-(elem:A):This", "kind" : "def"}, {"label" : "++", "tail" : "(xs: GenTraversableOnce[Card]): ArrayBuffer[Card]", "member" : "scala.collection.mutable.BufferLike.++", "link" : "menu_commands\/Deck$.html#++(xs:scala.collection.GenTraversableOnce[A]):This", "kind" : "def"}, {"label" : "<<", "tail" : "(cmd: Message[Card]): Unit", "member" : "scala.collection.mutable.BufferLike.<<", "link" : "menu_commands\/Deck$.html#<<(cmd:scala.collection.script.Message[A]):Unit", "kind" : "def"}, {"label" : "trimEnd", "tail" : "(n: Int): Unit", "member" : "scala.collection.mutable.BufferLike.trimEnd", "link" : "menu_commands\/Deck$.html#trimEnd(n:Int):Unit", "kind" : "def"}, {"label" : "trimStart", "tail" : "(n: Int): Unit", "member" : "scala.collection.mutable.BufferLike.trimStart", "link" : "menu_commands\/Deck$.html#trimStart(n:Int):Unit", "kind" : "def"}, {"label" : "insert", "tail" : "(n: Int, elems: Card*): Unit", "member" : "scala.collection.mutable.BufferLike.insert", "link" : "menu_commands\/Deck$.html#insert(n:Int,elems:A*):Unit", "kind" : "def"}, {"label" : "prependAll", "tail" : "(xs: TraversableOnce[Card]): Unit", "member" : "scala.collection.mutable.BufferLike.prependAll", "link" : "menu_commands\/Deck$.html#prependAll(xs:scala.collection.TraversableOnce[A]):Unit", "kind" : "def"}, {"label" : "prepend", "tail" : "(elems: Card*): Unit", "member" : "scala.collection.mutable.BufferLike.prepend", "link" : "menu_commands\/Deck$.html#prepend(elems:A*):Unit", "kind" : "def"}, {"label" : "appendAll", "tail" : "(xs: TraversableOnce[Card]): Unit", "member" : "scala.collection.mutable.BufferLike.appendAll", "link" : "menu_commands\/Deck$.html#appendAll(xs:scala.collection.TraversableOnce[A]):Unit", "kind" : "def"}, {"label" : "append", "tail" : "(elems: Card*): Unit", "member" : "scala.collection.mutable.BufferLike.append", "link" : "menu_commands\/Deck$.html#append(elems:A*):Unit", "kind" : "def"}, {"label" : "-=", "tail" : "(x: Card): Deck.this.type", "member" : "scala.collection.mutable.BufferLike.-=", "link" : "menu_commands\/Deck$.html#-=(x:A):BufferLike.this.type", "kind" : "def"}, {"label" : "--=", "tail" : "(xs: TraversableOnce[Card]): Deck.this.type", "member" : "scala.collection.generic.Shrinkable.--=", "link" : "menu_commands\/Deck$.html#--=(xs:scala.collection.TraversableOnce[A]):Shrinkable.this.type", "kind" : "def"}, {"label" : "-=", "tail" : "(elem1: Card, elem2: Card, elems: Card*): Deck.this.type", "member" : "scala.collection.generic.Shrinkable.-=", "link" : "menu_commands\/Deck$.html#-=(elem1:A,elem2:A,elems:A*):Shrinkable.this.type", "kind" : "def"}, {"label" : "+=", "tail" : "(elem1: Card, elem2: Card, elems: Card*): Deck.this.type", "member" : "scala.collection.generic.Growable.+=", "link" : "menu_commands\/Deck$.html#+=(elem1:A,elem2:A,elems:A*):Growable.this.type", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (Card) ⇒ Card): Deck.this.type", "member" : "scala.collection.mutable.SeqLike.transform", "link" : "menu_commands\/Deck$.html#transform(f:A=>A):SeqLike.this.type", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.SeqLike.toString", "link" : "menu_commands\/Deck$.html#toString():String", "kind" : "def"}, {"label" : "indices", "tail" : "(): Range", "member" : "scala.collection.SeqLike.indices", "link" : "menu_commands\/Deck$.html#indices:scala.collection.immutable.Range", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[Card]", "member" : "scala.collection.SeqLike.toSeq", "link" : "menu_commands\/Deck$.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "sorted", "tail" : "(ord: Ordering[B]): ArrayBuffer[Card]", "member" : "scala.collection.SeqLike.sorted", "link" : "menu_commands\/Deck$.html#sorted[B>:A](implicitord:scala.math.Ordering[B]):Repr", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (Card) ⇒ B)(ord: Ordering[B]): ArrayBuffer[Card]", "member" : "scala.collection.SeqLike.sortBy", "link" : "menu_commands\/Deck$.html#sortBy[B](f:A=>B)(implicitord:scala.math.Ordering[B]):Repr", "kind" : "def"}, {"label" : "sortWith", "tail" : "(lt: (Card, Card) ⇒ Boolean): ArrayBuffer[Card]", "member" : "scala.collection.SeqLike.sortWith", "link" : "menu_commands\/Deck$.html#sortWith(lt:(A,A)=>Boolean):Repr", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: GenSeq[B])(p: (Card, B) ⇒ Boolean): Boolean", "member" : "scala.collection.SeqLike.corresponds", "link" : "menu_commands\/Deck$.html#corresponds[B](that:scala.collection.GenSeq[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: B)(bf: CanBuildFrom[ArrayBuffer[Card], B, That]): That", "member" : "scala.collection.SeqLike.padTo", "link" : "menu_commands\/Deck$.html#padTo[B>:A,That](len:Int,elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : ":+", "tail" : "(elem: B)(bf: CanBuildFrom[ArrayBuffer[Card], B, That]): That", "member" : "scala.collection.SeqLike.:+", "link" : "menu_commands\/Deck$.html#:+[B>:A,That](elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "+:", "tail" : "(elem: B)(bf: CanBuildFrom[ArrayBuffer[Card], B, That]): That", "member" : "scala.collection.SeqLike.+:", "link" : "menu_commands\/Deck$.html#+:[B>:A,That](elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "updated", "tail" : "(index: Int, elem: B)(bf: CanBuildFrom[ArrayBuffer[Card], B, That]): That", "member" : "scala.collection.SeqLike.updated", "link" : "menu_commands\/Deck$.html#updated[B>:A,That](index:Int,elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, patch: GenSeq[B], replaced: Int)(bf: CanBuildFrom[ArrayBuffer[Card], B, That]): That", "member" : "scala.collection.SeqLike.patch", "link" : "menu_commands\/Deck$.html#patch[B>:A,That](from:Int,patch:scala.collection.GenSeq[B],replaced:Int)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "distinct", "tail" : "(): ArrayBuffer[Card]", "member" : "scala.collection.SeqLike.distinct", "link" : "menu_commands\/Deck$.html#distinct:Repr", "kind" : "def"}, {"label" : "intersect", "tail" : "(that: GenSeq[B]): ArrayBuffer[Card]", "member" : "scala.collection.SeqLike.intersect", "link" : "menu_commands\/Deck$.html#intersect[B>:A](that:scala.collection.GenSeq[B]):Repr", "kind" : "def"}, {"label" : "diff", "tail" : "(that: GenSeq[B]): ArrayBuffer[Card]", "member" : "scala.collection.SeqLike.diff", "link" : "menu_commands\/Deck$.html#diff[B>:A](that:scala.collection.GenSeq[B]):Repr", "kind" : "def"}, {"label" : "union", "tail" : "(that: GenSeq[B])(bf: CanBuildFrom[ArrayBuffer[Card], B, That]): That", "member" : "scala.collection.SeqLike.union", "link" : "menu_commands\/Deck$.html#union[B>:A,That](that:scala.collection.GenSeq[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: A1): Boolean", "member" : "scala.collection.SeqLike.contains", "link" : "menu_commands\/Deck$.html#contains[A1>:A](elem:A1):Boolean", "kind" : "def"}, {"label" : "containsSlice", "tail" : "(that: GenSeq[B]): Boolean", "member" : "scala.collection.SeqLike.containsSlice", "link" : "menu_commands\/Deck$.html#containsSlice[B](that:scala.collection.GenSeq[B]):Boolean", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: GenSeq[B], end: Int): Int", "member" : "scala.collection.SeqLike.lastIndexOfSlice", "link" : "menu_commands\/Deck$.html#lastIndexOfSlice[B>:A](that:scala.collection.GenSeq[B],end:Int):Int", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: GenSeq[B]): Int", "member" : "scala.collection.SeqLike.lastIndexOfSlice", "link" : "menu_commands\/Deck$.html#lastIndexOfSlice[B>:A](that:scala.collection.GenSeq[B]):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: GenSeq[B], from: Int): Int", "member" : "scala.collection.SeqLike.indexOfSlice", "link" : "menu_commands\/Deck$.html#indexOfSlice[B>:A](that:scala.collection.GenSeq[B],from:Int):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: GenSeq[B]): Int", "member" : "scala.collection.SeqLike.indexOfSlice", "link" : "menu_commands\/Deck$.html#indexOfSlice[B>:A](that:scala.collection.GenSeq[B]):Int", "kind" : "def"}, {"label" : "reverseMap", "tail" : "(f: (Card) ⇒ B)(bf: CanBuildFrom[ArrayBuffer[Card], B, That]): That", "member" : "scala.collection.SeqLike.reverseMap", "link" : "menu_commands\/Deck$.html#reverseMap[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "combinations", "tail" : "(n: Int): Iterator[ArrayBuffer[Card]]", "member" : "scala.collection.SeqLike.combinations", "link" : "menu_commands\/Deck$.html#combinations(n:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "permutations", "tail" : "(): Iterator[ArrayBuffer[Card]]", "member" : "scala.collection.SeqLike.permutations", "link" : "menu_commands\/Deck$.html#permutations:Iterator[Repr]", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.SeqLike.size", "link" : "menu_commands\/Deck$.html#size:Int", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "scala.collection.GenSeqLike.equals", "link" : "menu_commands\/Deck$.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "startsWith", "tail" : "(that: GenSeq[B]): Boolean", "member" : "scala.collection.GenSeqLike.startsWith", "link" : "menu_commands\/Deck$.html#startsWith[B](that:scala.collection.GenSeq[B]):Boolean", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (Card) ⇒ Boolean): Int", "member" : "scala.collection.GenSeqLike.lastIndexWhere", "link" : "menu_commands\/Deck$.html#lastIndexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(elem: B, end: Int): Int", "member" : "scala.collection.GenSeqLike.lastIndexOf", "link" : "menu_commands\/Deck$.html#lastIndexOf[B>:A](elem:B,end:Int):Int", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.GenSeqLike.lastIndexOf", "link" : "menu_commands\/Deck$.html#lastIndexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.GenSeqLike.indexOf", "link" : "menu_commands\/Deck$.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.GenSeqLike.indexOf", "link" : "menu_commands\/Deck$.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Card) ⇒ Boolean): Int", "member" : "scala.collection.GenSeqLike.indexWhere", "link" : "menu_commands\/Deck$.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "prefixLength", "tail" : "(p: (Card) ⇒ Boolean): Int", "member" : "scala.collection.GenSeqLike.prefixLength", "link" : "menu_commands\/Deck$.html#prefixLength(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "isDefinedAt", "tail" : "(idx: Int): Boolean", "member" : "scala.collection.GenSeqLike.isDefinedAt", "link" : "menu_commands\/Deck$.html#isDefinedAt(idx:Int):Boolean", "kind" : "def"}, {"label" : "runWith", "tail" : "(action: (Card) ⇒ U): (Int) ⇒ Boolean", "member" : "scala.PartialFunction.runWith", "link" : "menu_commands\/Deck$.html#runWith[U](action:B=>U):A=>Boolean", "kind" : "def"}, {"label" : "applyOrElse", "tail" : "(x: A1, default: (A1) ⇒ B1): B1", "member" : "scala.PartialFunction.applyOrElse", "link" : "menu_commands\/Deck$.html#applyOrElse[A1<:A,B1>:B](x:A1,default:A1=>B1):B1", "kind" : "def"}, {"label" : "lift", "tail" : "(): (Int) ⇒ Option[Card]", "member" : "scala.PartialFunction.lift", "link" : "menu_commands\/Deck$.html#lift:A=>Option[B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: (Card) ⇒ C): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "menu_commands\/Deck$.html#andThen[C](k:B=>C):PartialFunction[A,C]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: PartialFunction[A1, B1]): PartialFunction[A1, B1]", "member" : "scala.PartialFunction.orElse", "link" : "menu_commands\/Deck$.html#orElse[A1<:A,B1>:B](that:PartialFunction[A1,B1]):PartialFunction[A1,B1]", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Int): (A) ⇒ Card", "member" : "scala.Function1.compose", "link" : "menu_commands\/Deck$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.IterableLike.canEqual", "link" : "menu_commands\/Deck$.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[Card]", "member" : "scala.collection.IterableLike.toStream", "link" : "menu_commands\/Deck$.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: GenIterable[B], thisElem: A1, thatElem: B)(bf: CanBuildFrom[ArrayBuffer[Card], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zipAll", "link" : "menu_commands\/Deck$.html#zipAll[B,A1>:A,That](that:scala.collection.GenIterable[B],thisElem:A1,thatElem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[ArrayBuffer[Card]]", "member" : "scala.collection.IterableLike.sliding", "link" : "menu_commands\/Deck$.html#sliding(size:Int,step:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[ArrayBuffer[Card]]", "member" : "scala.collection.IterableLike.sliding", "link" : "menu_commands\/Deck$.html#sliding(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[ArrayBuffer[Card]]", "member" : "scala.collection.IterableLike.grouped", "link" : "menu_commands\/Deck$.html#grouped(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Card]", "member" : "scala.collection.IterableLike.toIterator", "link" : "menu_commands\/Deck$.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[Card]", "member" : "scala.collection.IterableLike.toIterable", "link" : "menu_commands\/Deck$.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "transpose", "tail" : "(asTraversable: (Card) ⇒ GenTraversableOnce[B]): ArrayBuffer[ArrayBuffer[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.transpose", "link" : "menu_commands\/Deck$.html#transpose[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asTraversable: (Card) ⇒ GenTraversableOnce[B]): ArrayBuffer[B]", "member" : "scala.collection.generic.GenericTraversableTemplate.flatten", "link" : "menu_commands\/Deck$.html#flatten[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Card) ⇒ (A1, A2, A3)): (ArrayBuffer[A1], ArrayBuffer[A2], ArrayBuffer[A3])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip3", "link" : "menu_commands\/Deck$.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Card) ⇒ (A1, A2)): (ArrayBuffer[A1], ArrayBuffer[A2])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip", "link" : "menu_commands\/Deck$.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "genericBuilder", "tail" : "(): Builder[B, ArrayBuffer[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.genericBuilder", "link" : "menu_commands\/Deck$.html#genericBuilder[B]:scala.collection.mutable.Builder[B,CC[B]]", "kind" : "def"}, {"label" : "newBuilder", "tail" : "(): Builder[Card, ArrayBuffer[Card]]", "member" : "scala.collection.generic.GenericTraversableTemplate.newBuilder", "link" : "menu_commands\/Deck$.html#newBuilder:scala.collection.mutable.Builder[A,CC[A]]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Card) ⇒ Boolean): FilterMonadic[Card, ArrayBuffer[Card]]", "member" : "scala.collection.TraversableLike.withFilter", "link" : "menu_commands\/Deck$.html#withFilter(p:A=>Boolean):scala.collection.generic.FilterMonadic[A,Repr]", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, Card, Col[Card]]): Col[Card]", "member" : "scala.collection.TraversableLike.to", "link" : "menu_commands\/Deck$.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[Card]", "member" : "scala.collection.TraversableLike.toTraversable", "link" : "menu_commands\/Deck$.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[ArrayBuffer[Card]]", "member" : "scala.collection.TraversableLike.inits", "link" : "menu_commands\/Deck$.html#inits:Iterator[Repr]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[ArrayBuffer[Card]]", "member" : "scala.collection.TraversableLike.tails", "link" : "menu_commands\/Deck$.html#tails:Iterator[Repr]", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[Card]", "member" : "scala.collection.TraversableLike.lastOption", "link" : "menu_commands\/Deck$.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Card]", "member" : "scala.collection.TraversableLike.headOption", "link" : "menu_commands\/Deck$.html#headOption:Option[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Card, B) ⇒ B)(bf: CanBuildFrom[ArrayBuffer[Card], B, That]): That", "member" : "scala.collection.TraversableLike.scanRight", "link" : "menu_commands\/Deck$.html#scanRight[B,That](z:B)(op:(A,B)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Card) ⇒ B)(bf: CanBuildFrom[ArrayBuffer[Card], B, That]): That", "member" : "scala.collection.TraversableLike.scanLeft", "link" : "menu_commands\/Deck$.html#scanLeft[B,That](z:B)(op:(B,A)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) ⇒ B)(cbf: CanBuildFrom[ArrayBuffer[Card], B, That]): That", "member" : "scala.collection.TraversableLike.scan", "link" : "menu_commands\/Deck$.html#scan[B>:A,That](z:B)(op:(B,B)=>B)(implicitcbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Card) ⇒ K): Map[K, ArrayBuffer[Card]]", "member" : "scala.collection.TraversableLike.groupBy", "link" : "menu_commands\/Deck$.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,Repr]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Card) ⇒ Boolean): (ArrayBuffer[Card], ArrayBuffer[Card])", "member" : "scala.collection.TraversableLike.partition", "link" : "menu_commands\/Deck$.html#partition(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Card, B])(bf: CanBuildFrom[ArrayBuffer[Card], B, That]): That", "member" : "scala.collection.TraversableLike.collect", "link" : "menu_commands\/Deck$.html#collect[B,That](pf:PartialFunction[A,B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (Card) ⇒ Boolean): ArrayBuffer[Card]", "member" : "scala.collection.TraversableLike.filterNot", "link" : "menu_commands\/Deck$.html#filterNot(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Card) ⇒ Boolean): ArrayBuffer[Card]", "member" : "scala.collection.TraversableLike.filter", "link" : "menu_commands\/Deck$.html#filter(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Card) ⇒ GenTraversableOnce[B])(bf: CanBuildFrom[ArrayBuffer[Card], B, That]): That", "member" : "scala.collection.TraversableLike.flatMap", "link" : "menu_commands\/Deck$.html#flatMap[B,That](f:A=>scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Card) ⇒ B)(bf: CanBuildFrom[ArrayBuffer[Card], B, That]): That", "member" : "scala.collection.TraversableLike.map", "link" : "menu_commands\/Deck$.html#map[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: Traversable[B])(bf: CanBuildFrom[ArrayBuffer[Card], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "menu_commands\/Deck$.html#++:[B>:A,That](that:Traversable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: TraversableOnce[B])(bf: CanBuildFrom[ArrayBuffer[Card], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "menu_commands\/Deck$.html#++:[B>:A,That](that:scala.collection.TraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++", "tail" : "(that: GenTraversableOnce[B])(bf: CanBuildFrom[ArrayBuffer[Card], B, That]): That", "member" : "scala.collection.TraversableLike.++", "link" : "menu_commands\/Deck$.html#++[B>:A,That](that:scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.hasDefiniteSize", "link" : "menu_commands\/Deck$.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.isTraversableAgain", "link" : "menu_commands\/Deck$.html#isTraversableAgain:Boolean", "kind" : "final def"}, {"label" : "repr", "tail" : "(): ArrayBuffer[Card]", "member" : "scala.collection.TraversableLike.repr", "link" : "menu_commands\/Deck$.html#repr:Repr", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "scala.collection.TraversableLike.Self", "link" : "menu_commands\/Deck$.html#Self=Repr", "kind" : "type"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "menu_commands\/Deck$.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "menu_commands\/Deck$.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "menu_commands\/Deck$.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "menu_commands\/Deck$.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "menu_commands\/Deck$.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "menu_commands\/Deck$.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Card, (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "menu_commands\/Deck$.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[Card]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "menu_commands\/Deck$.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "menu_commands\/Deck$.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[Card]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "menu_commands\/Deck$.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Card]", "member" : "scala.collection.TraversableOnce.toList", "link" : "menu_commands\/Deck$.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "menu_commands\/Deck$.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "menu_commands\/Deck$.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "menu_commands\/Deck$.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "menu_commands\/Deck$.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Card) ⇒ B)(cmp: Ordering[B]): Card", "member" : "scala.collection.TraversableOnce.minBy", "link" : "menu_commands\/Deck$.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Card) ⇒ B)(cmp: Ordering[B]): Card", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "menu_commands\/Deck$.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): Card", "member" : "scala.collection.TraversableOnce.max", "link" : "menu_commands\/Deck$.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): Card", "member" : "scala.collection.TraversableOnce.min", "link" : "menu_commands\/Deck$.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "menu_commands\/Deck$.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "menu_commands\/Deck$.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, Card) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "menu_commands\/Deck$.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "menu_commands\/Deck$.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "menu_commands\/Deck$.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "menu_commands\/Deck$.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Card, B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "menu_commands\/Deck$.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Card) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "menu_commands\/Deck$.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Card, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "menu_commands\/Deck$.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Card) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "menu_commands\/Deck$.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Card, B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "menu_commands\/Deck$.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Card) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "menu_commands\/Deck$.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "menu_commands\/Deck$.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[Card]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "menu_commands\/Deck$.html#reversed:List[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "menu_commands\/Deck$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "menu_commands\/Deck$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "menu_commands\/Deck$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "menu_commands\/Deck$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "menu_commands\/Deck$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "menu_commands\/Deck$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "menu_commands\/Deck$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Deck$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Deck$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Deck$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "menu_commands\/Deck$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "menu_commands\/Deck$.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "menu_commands\/Deck$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "menu_commands\/Deck$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "menu_commands\/Deck$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "menu_commands.Discard", "shortDescription" : "A discard pile implemented with a stack", "object" : "menu_commands\/Discard$.html", "members_object" : [{"label" : "WithFilter", "tail" : "", "member" : "scala.collection.TraversableLike.WithFilter", "link" : "menu_commands\/Discard$.html#WithFilterextendsFilterMonadic[A,Repr]", "kind" : "class"}, {"label" : "addCard", "tail" : "(c: Card): Unit", "member" : "menu_commands.Discard.addCard", "link" : "menu_commands\/Discard$.html#addCard(c:menu_commands.Card):Unit", "kind" : "def"}, {"label" : "cardsLEFTstr", "tail" : "(): String", "member" : "menu_commands.Discard.cardsLEFTstr", "link" : "menu_commands\/Discard$.html#cardsLEFTstr:String", "kind" : "def"}, {"label" : "inIT", "tail" : "(): Unit", "member" : "menu_commands.Discard.inIT", "link" : "menu_commands\/Discard$.html#inIT:Unit", "kind" : "def"}, {"label" : "clone", "tail" : "(): Stack[Card]", "member" : "scala.collection.mutable.Stack.clone", "link" : "menu_commands\/Discard$.html#clone():scala.collection.mutable.Stack[A]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Card) ⇒ U): Unit", "member" : "scala.collection.mutable.Stack.foreach", "link" : "menu_commands\/Discard$.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Card]", "member" : "scala.collection.mutable.Stack.toList", "link" : "menu_commands\/Discard$.html#toList:List[A]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[Card]", "member" : "scala.collection.mutable.Stack.iterator", "link" : "menu_commands\/Discard$.html#iterator:Iterator[A]", "kind" : "def"}, {"label" : "clear", "tail" : "(): Unit", "member" : "scala.collection.mutable.Stack.clear", "link" : "menu_commands\/Discard$.html#clear():Unit", "kind" : "def"}, {"label" : "pop", "tail" : "(): Card", "member" : "scala.collection.mutable.Stack.pop", "link" : "menu_commands\/Discard$.html#pop():A", "kind" : "def"}, {"label" : "top", "tail" : "(): Card", "member" : "scala.collection.mutable.Stack.top", "link" : "menu_commands\/Discard$.html#top:A", "kind" : "def"}, {"label" : "pushAll", "tail" : "(xs: TraversableOnce[Card]): Discard.this.type", "member" : "scala.collection.mutable.Stack.pushAll", "link" : "menu_commands\/Discard$.html#pushAll(xs:scala.collection.TraversableOnce[A]):Stack.this.type", "kind" : "def"}, {"label" : "push", "tail" : "(elem1: Card, elem2: Card, elems: Card*): Discard.this.type", "member" : "scala.collection.mutable.Stack.push", "link" : "menu_commands\/Discard$.html#push(elem1:A,elem2:A,elems:A*):Stack.this.type", "kind" : "def"}, {"label" : "push", "tail" : "(elem: Card): Discard.this.type", "member" : "scala.collection.mutable.Stack.push", "link" : "menu_commands\/Discard$.html#push(elem:A):Stack.this.type", "kind" : "def"}, {"label" : "update", "tail" : "(n: Int, newelem: Card): Unit", "member" : "scala.collection.mutable.Stack.update", "link" : "menu_commands\/Discard$.html#update(n:Int,newelem:A):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(index: Int): Card", "member" : "scala.collection.mutable.Stack.apply", "link" : "menu_commands\/Discard$.html#apply(index:Int):A", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.mutable.Stack.length", "link" : "menu_commands\/Discard$.html#length:Int", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.mutable.Stack.isEmpty", "link" : "menu_commands\/Discard$.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "companion", "tail" : "(): Stack.type", "member" : "scala.collection.mutable.Stack.companion", "link" : "menu_commands\/Discard$.html#companion:scala.collection.mutable.Stack.type", "kind" : "def"}, {"label" : "elems", "tail" : ": List[Card]", "member" : "scala.collection.mutable.Stack.elems", "link" : "menu_commands\/Discard$.html#elems:List[A]", "kind" : "var"}, {"label" : "seq", "tail" : "(): Seq[Card]", "member" : "scala.collection.mutable.Seq.seq", "link" : "menu_commands\/Discard$.html#seq:scala.collection.mutable.Seq[A]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (Card) ⇒ Card): Discard.this.type", "member" : "scala.collection.mutable.SeqLike.transform", "link" : "menu_commands\/Discard$.html#transform(f:A=>A):SeqLike.this.type", "kind" : "def"}, {"label" : "parCombiner", "tail" : "(): Combiner[Card, ParSeq[Card]]", "member" : "scala.collection.mutable.SeqLike.parCombiner", "link" : "menu_commands\/Discard$.html#parCombiner:scala.collection.parallel.Combiner[A,scala.collection.parallel.mutable.ParSeq[A]]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.SeqLike.toString", "link" : "menu_commands\/Discard$.html#toString():String", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): SeqView[Card, Stack[Card]]", "member" : "scala.collection.SeqLike.view", "link" : "menu_commands\/Discard$.html#view(from:Int,until:Int):scala.collection.SeqView[A,Repr]", "kind" : "def"}, {"label" : "view", "tail" : "(): SeqView[Card, Stack[Card]]", "member" : "scala.collection.SeqLike.view", "link" : "menu_commands\/Discard$.html#view:scala.collection.SeqView[A,Repr]", "kind" : "def"}, {"label" : "indices", "tail" : "(): Range", "member" : "scala.collection.SeqLike.indices", "link" : "menu_commands\/Discard$.html#indices:scala.collection.immutable.Range", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[Card]", "member" : "scala.collection.SeqLike.toSeq", "link" : "menu_commands\/Discard$.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "sorted", "tail" : "(ord: Ordering[B]): Stack[Card]", "member" : "scala.collection.SeqLike.sorted", "link" : "menu_commands\/Discard$.html#sorted[B>:A](implicitord:scala.math.Ordering[B]):Repr", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (Card) ⇒ B)(ord: Ordering[B]): Stack[Card]", "member" : "scala.collection.SeqLike.sortBy", "link" : "menu_commands\/Discard$.html#sortBy[B](f:A=>B)(implicitord:scala.math.Ordering[B]):Repr", "kind" : "def"}, {"label" : "sortWith", "tail" : "(lt: (Card, Card) ⇒ Boolean): Stack[Card]", "member" : "scala.collection.SeqLike.sortWith", "link" : "menu_commands\/Discard$.html#sortWith(lt:(A,A)=>Boolean):Repr", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: GenSeq[B])(p: (Card, B) ⇒ Boolean): Boolean", "member" : "scala.collection.SeqLike.corresponds", "link" : "menu_commands\/Discard$.html#corresponds[B](that:scala.collection.GenSeq[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: B)(bf: CanBuildFrom[Stack[Card], B, That]): That", "member" : "scala.collection.SeqLike.padTo", "link" : "menu_commands\/Discard$.html#padTo[B>:A,That](len:Int,elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : ":+", "tail" : "(elem: B)(bf: CanBuildFrom[Stack[Card], B, That]): That", "member" : "scala.collection.SeqLike.:+", "link" : "menu_commands\/Discard$.html#:+[B>:A,That](elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "+:", "tail" : "(elem: B)(bf: CanBuildFrom[Stack[Card], B, That]): That", "member" : "scala.collection.SeqLike.+:", "link" : "menu_commands\/Discard$.html#+:[B>:A,That](elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "updated", "tail" : "(index: Int, elem: B)(bf: CanBuildFrom[Stack[Card], B, That]): That", "member" : "scala.collection.SeqLike.updated", "link" : "menu_commands\/Discard$.html#updated[B>:A,That](index:Int,elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, patch: GenSeq[B], replaced: Int)(bf: CanBuildFrom[Stack[Card], B, That]): That", "member" : "scala.collection.SeqLike.patch", "link" : "menu_commands\/Discard$.html#patch[B>:A,That](from:Int,patch:scala.collection.GenSeq[B],replaced:Int)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Stack[Card]", "member" : "scala.collection.SeqLike.distinct", "link" : "menu_commands\/Discard$.html#distinct:Repr", "kind" : "def"}, {"label" : "intersect", "tail" : "(that: GenSeq[B]): Stack[Card]", "member" : "scala.collection.SeqLike.intersect", "link" : "menu_commands\/Discard$.html#intersect[B>:A](that:scala.collection.GenSeq[B]):Repr", "kind" : "def"}, {"label" : "diff", "tail" : "(that: GenSeq[B]): Stack[Card]", "member" : "scala.collection.SeqLike.diff", "link" : "menu_commands\/Discard$.html#diff[B>:A](that:scala.collection.GenSeq[B]):Repr", "kind" : "def"}, {"label" : "union", "tail" : "(that: GenSeq[B])(bf: CanBuildFrom[Stack[Card], B, That]): That", "member" : "scala.collection.SeqLike.union", "link" : "menu_commands\/Discard$.html#union[B>:A,That](that:scala.collection.GenSeq[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: A1): Boolean", "member" : "scala.collection.SeqLike.contains", "link" : "menu_commands\/Discard$.html#contains[A1>:A](elem:A1):Boolean", "kind" : "def"}, {"label" : "containsSlice", "tail" : "(that: GenSeq[B]): Boolean", "member" : "scala.collection.SeqLike.containsSlice", "link" : "menu_commands\/Discard$.html#containsSlice[B](that:scala.collection.GenSeq[B]):Boolean", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: GenSeq[B], end: Int): Int", "member" : "scala.collection.SeqLike.lastIndexOfSlice", "link" : "menu_commands\/Discard$.html#lastIndexOfSlice[B>:A](that:scala.collection.GenSeq[B],end:Int):Int", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: GenSeq[B]): Int", "member" : "scala.collection.SeqLike.lastIndexOfSlice", "link" : "menu_commands\/Discard$.html#lastIndexOfSlice[B>:A](that:scala.collection.GenSeq[B]):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: GenSeq[B], from: Int): Int", "member" : "scala.collection.SeqLike.indexOfSlice", "link" : "menu_commands\/Discard$.html#indexOfSlice[B>:A](that:scala.collection.GenSeq[B],from:Int):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: GenSeq[B]): Int", "member" : "scala.collection.SeqLike.indexOfSlice", "link" : "menu_commands\/Discard$.html#indexOfSlice[B>:A](that:scala.collection.GenSeq[B]):Int", "kind" : "def"}, {"label" : "endsWith", "tail" : "(that: GenSeq[B]): Boolean", "member" : "scala.collection.SeqLike.endsWith", "link" : "menu_commands\/Discard$.html#endsWith[B](that:scala.collection.GenSeq[B]):Boolean", "kind" : "def"}, {"label" : "startsWith", "tail" : "(that: GenSeq[B], offset: Int): Boolean", "member" : "scala.collection.SeqLike.startsWith", "link" : "menu_commands\/Discard$.html#startsWith[B](that:scala.collection.GenSeq[B],offset:Int):Boolean", "kind" : "def"}, {"label" : "reverseIterator", "tail" : "(): Iterator[Card]", "member" : "scala.collection.SeqLike.reverseIterator", "link" : "menu_commands\/Discard$.html#reverseIterator:Iterator[A]", "kind" : "def"}, {"label" : "reverseMap", "tail" : "(f: (Card) ⇒ B)(bf: CanBuildFrom[Stack[Card], B, That]): That", "member" : "scala.collection.SeqLike.reverseMap", "link" : "menu_commands\/Discard$.html#reverseMap[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "reverse", "tail" : "(): Stack[Card]", "member" : "scala.collection.SeqLike.reverse", "link" : "menu_commands\/Discard$.html#reverse:Repr", "kind" : "def"}, {"label" : "combinations", "tail" : "(n: Int): Iterator[Stack[Card]]", "member" : "scala.collection.SeqLike.combinations", "link" : "menu_commands\/Discard$.html#combinations(n:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "permutations", "tail" : "(): Iterator[Stack[Card]]", "member" : "scala.collection.SeqLike.permutations", "link" : "menu_commands\/Discard$.html#permutations:Iterator[Repr]", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (Card) ⇒ Boolean, end: Int): Int", "member" : "scala.collection.SeqLike.lastIndexWhere", "link" : "menu_commands\/Discard$.html#lastIndexWhere(p:A=>Boolean,end:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Card) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.SeqLike.indexWhere", "link" : "menu_commands\/Discard$.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "segmentLength", "tail" : "(p: (Card) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.SeqLike.segmentLength", "link" : "menu_commands\/Discard$.html#segmentLength(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.SeqLike.size", "link" : "menu_commands\/Discard$.html#size:Int", "kind" : "def"}, {"label" : "lengthCompare", "tail" : "(len: Int): Int", "member" : "scala.collection.SeqLike.lengthCompare", "link" : "menu_commands\/Discard$.html#lengthCompare(len:Int):Int", "kind" : "def"}, {"label" : "toCollection", "tail" : "(repr: Stack[Card]): Seq[Card]", "member" : "scala.collection.SeqLike.toCollection", "link" : "menu_commands\/Discard$.html#toCollection(repr:Repr):Seq[A]", "kind" : "def"}, {"label" : "thisCollection", "tail" : "(): Seq[Card]", "member" : "scala.collection.SeqLike.thisCollection", "link" : "menu_commands\/Discard$.html#thisCollection:Seq[A]", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "scala.collection.GenSeqLike.equals", "link" : "menu_commands\/Discard$.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.collection.GenSeqLike.hashCode", "link" : "menu_commands\/Discard$.html#hashCode():Int", "kind" : "def"}, {"label" : "startsWith", "tail" : "(that: GenSeq[B]): Boolean", "member" : "scala.collection.GenSeqLike.startsWith", "link" : "menu_commands\/Discard$.html#startsWith[B](that:scala.collection.GenSeq[B]):Boolean", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (Card) ⇒ Boolean): Int", "member" : "scala.collection.GenSeqLike.lastIndexWhere", "link" : "menu_commands\/Discard$.html#lastIndexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(elem: B, end: Int): Int", "member" : "scala.collection.GenSeqLike.lastIndexOf", "link" : "menu_commands\/Discard$.html#lastIndexOf[B>:A](elem:B,end:Int):Int", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.GenSeqLike.lastIndexOf", "link" : "menu_commands\/Discard$.html#lastIndexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.GenSeqLike.indexOf", "link" : "menu_commands\/Discard$.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.GenSeqLike.indexOf", "link" : "menu_commands\/Discard$.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Card) ⇒ Boolean): Int", "member" : "scala.collection.GenSeqLike.indexWhere", "link" : "menu_commands\/Discard$.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "prefixLength", "tail" : "(p: (Card) ⇒ Boolean): Int", "member" : "scala.collection.GenSeqLike.prefixLength", "link" : "menu_commands\/Discard$.html#prefixLength(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "isDefinedAt", "tail" : "(idx: Int): Boolean", "member" : "scala.collection.GenSeqLike.isDefinedAt", "link" : "menu_commands\/Discard$.html#isDefinedAt(idx:Int):Boolean", "kind" : "def"}, {"label" : "runWith", "tail" : "(action: (Card) ⇒ U): (Int) ⇒ Boolean", "member" : "scala.PartialFunction.runWith", "link" : "menu_commands\/Discard$.html#runWith[U](action:B=>U):A=>Boolean", "kind" : "def"}, {"label" : "applyOrElse", "tail" : "(x: A1, default: (A1) ⇒ B1): B1", "member" : "scala.PartialFunction.applyOrElse", "link" : "menu_commands\/Discard$.html#applyOrElse[A1<:A,B1>:B](x:A1,default:A1=>B1):B1", "kind" : "def"}, {"label" : "lift", "tail" : "(): (Int) ⇒ Option[Card]", "member" : "scala.PartialFunction.lift", "link" : "menu_commands\/Discard$.html#lift:A=>Option[B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: (Card) ⇒ C): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "menu_commands\/Discard$.html#andThen[C](k:B=>C):PartialFunction[A,C]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: PartialFunction[A1, B1]): PartialFunction[A1, B1]", "member" : "scala.PartialFunction.orElse", "link" : "menu_commands\/Discard$.html#orElse[A1<:A,B1>:B](that:PartialFunction[A1,B1]):PartialFunction[A1,B1]", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Int): (A) ⇒ Card", "member" : "scala.Function1.compose", "link" : "menu_commands\/Discard$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.IterableLike.canEqual", "link" : "menu_commands\/Discard$.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[Card]", "member" : "scala.collection.IterableLike.toStream", "link" : "menu_commands\/Discard$.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: GenIterable[B]): Boolean", "member" : "scala.collection.IterableLike.sameElements", "link" : "menu_commands\/Discard$.html#sameElements[B>:A](that:scala.collection.GenIterable[B]):Boolean", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(bf: CanBuildFrom[Stack[Card], (A1, Int), That]): That", "member" : "scala.collection.IterableLike.zipWithIndex", "link" : "menu_commands\/Discard$.html#zipWithIndex[A1>:A,That](implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,Int),That]):That", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: GenIterable[B], thisElem: A1, thatElem: B)(bf: CanBuildFrom[Stack[Card], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zipAll", "link" : "menu_commands\/Discard$.html#zipAll[B,A1>:A,That](that:scala.collection.GenIterable[B],thisElem:A1,thatElem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "zip", "tail" : "(that: GenIterable[B])(bf: CanBuildFrom[Stack[Card], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zip", "link" : "menu_commands\/Discard$.html#zip[A1>:A,B,That](that:scala.collection.GenIterable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.IterableLike.copyToArray", "link" : "menu_commands\/Discard$.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): Stack[Card]", "member" : "scala.collection.IterableLike.dropRight", "link" : "menu_commands\/Discard$.html#dropRight(n:Int):Repr", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): Stack[Card]", "member" : "scala.collection.IterableLike.takeRight", "link" : "menu_commands\/Discard$.html#takeRight(n:Int):Repr", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[Stack[Card]]", "member" : "scala.collection.IterableLike.sliding", "link" : "menu_commands\/Discard$.html#sliding(size:Int,step:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[Stack[Card]]", "member" : "scala.collection.IterableLike.sliding", "link" : "menu_commands\/Discard$.html#sliding(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[Stack[Card]]", "member" : "scala.collection.IterableLike.grouped", "link" : "menu_commands\/Discard$.html#grouped(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Card) ⇒ Boolean): Stack[Card]", "member" : "scala.collection.IterableLike.takeWhile", "link" : "menu_commands\/Discard$.html#takeWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Stack[Card]", "member" : "scala.collection.IterableLike.drop", "link" : "menu_commands\/Discard$.html#drop(n:Int):Repr", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Stack[Card]", "member" : "scala.collection.IterableLike.take", "link" : "menu_commands\/Discard$.html#take(n:Int):Repr", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Stack[Card]", "member" : "scala.collection.IterableLike.slice", "link" : "menu_commands\/Discard$.html#slice(from:Int,until:Int):Repr", "kind" : "def"}, {"label" : "head", "tail" : "(): Card", "member" : "scala.collection.IterableLike.head", "link" : "menu_commands\/Discard$.html#head:A", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Card]", "member" : "scala.collection.IterableLike.toIterator", "link" : "menu_commands\/Discard$.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[Card]", "member" : "scala.collection.IterableLike.toIterable", "link" : "menu_commands\/Discard$.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Card, B) ⇒ B): B", "member" : "scala.collection.IterableLike.reduceRight", "link" : "menu_commands\/Discard$.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Card, B) ⇒ B): B", "member" : "scala.collection.IterableLike.foldRight", "link" : "menu_commands\/Discard$.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Card) ⇒ Boolean): Option[Card]", "member" : "scala.collection.IterableLike.find", "link" : "menu_commands\/Discard$.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Card) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.exists", "link" : "menu_commands\/Discard$.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Card) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.forall", "link" : "menu_commands\/Discard$.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "transpose", "tail" : "(asTraversable: (Card) ⇒ GenTraversableOnce[B]): Stack[Stack[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.transpose", "link" : "menu_commands\/Discard$.html#transpose[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asTraversable: (Card) ⇒ GenTraversableOnce[B]): Stack[B]", "member" : "scala.collection.generic.GenericTraversableTemplate.flatten", "link" : "menu_commands\/Discard$.html#flatten[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Card) ⇒ (A1, A2, A3)): (Stack[A1], Stack[A2], Stack[A3])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip3", "link" : "menu_commands\/Discard$.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Card) ⇒ (A1, A2)): (Stack[A1], Stack[A2])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip", "link" : "menu_commands\/Discard$.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "genericBuilder", "tail" : "(): Builder[B, Stack[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.genericBuilder", "link" : "menu_commands\/Discard$.html#genericBuilder[B]:scala.collection.mutable.Builder[B,CC[B]]", "kind" : "def"}, {"label" : "newBuilder", "tail" : "(): Builder[Card, Stack[Card]]", "member" : "scala.collection.generic.GenericTraversableTemplate.newBuilder", "link" : "menu_commands\/Discard$.html#newBuilder:scala.collection.mutable.Builder[A,CC[A]]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Card) ⇒ Boolean): FilterMonadic[Card, Stack[Card]]", "member" : "scala.collection.TraversableLike.withFilter", "link" : "menu_commands\/Discard$.html#withFilter(p:A=>Boolean):scala.collection.generic.FilterMonadic[A,Repr]", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.TraversableLike.stringPrefix", "link" : "menu_commands\/Discard$.html#stringPrefix:String", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, Card, Col[Card]]): Col[Card]", "member" : "scala.collection.TraversableLike.to", "link" : "menu_commands\/Discard$.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[Card]", "member" : "scala.collection.TraversableLike.toTraversable", "link" : "menu_commands\/Discard$.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[Stack[Card]]", "member" : "scala.collection.TraversableLike.inits", "link" : "menu_commands\/Discard$.html#inits:Iterator[Repr]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[Stack[Card]]", "member" : "scala.collection.TraversableLike.tails", "link" : "menu_commands\/Discard$.html#tails:Iterator[Repr]", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Stack[Card], Stack[Card])", "member" : "scala.collection.TraversableLike.splitAt", "link" : "menu_commands\/Discard$.html#splitAt(n:Int):(Repr,Repr)", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Card) ⇒ Boolean): (Stack[Card], Stack[Card])", "member" : "scala.collection.TraversableLike.span", "link" : "menu_commands\/Discard$.html#span(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Card) ⇒ Boolean): Stack[Card]", "member" : "scala.collection.TraversableLike.dropWhile", "link" : "menu_commands\/Discard$.html#dropWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "init", "tail" : "(): Stack[Card]", "member" : "scala.collection.TraversableLike.init", "link" : "menu_commands\/Discard$.html#init:Repr", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[Card]", "member" : "scala.collection.TraversableLike.lastOption", "link" : "menu_commands\/Discard$.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): Card", "member" : "scala.collection.TraversableLike.last", "link" : "menu_commands\/Discard$.html#last:A", "kind" : "def"}, {"label" : "tail", "tail" : "(): Stack[Card]", "member" : "scala.collection.TraversableLike.tail", "link" : "menu_commands\/Discard$.html#tail:Repr", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Card]", "member" : "scala.collection.TraversableLike.headOption", "link" : "menu_commands\/Discard$.html#headOption:Option[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Card, B) ⇒ B)(bf: CanBuildFrom[Stack[Card], B, That]): That", "member" : "scala.collection.TraversableLike.scanRight", "link" : "menu_commands\/Discard$.html#scanRight[B,That](z:B)(op:(A,B)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Card) ⇒ B)(bf: CanBuildFrom[Stack[Card], B, That]): That", "member" : "scala.collection.TraversableLike.scanLeft", "link" : "menu_commands\/Discard$.html#scanLeft[B,That](z:B)(op:(B,A)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) ⇒ B)(cbf: CanBuildFrom[Stack[Card], B, That]): That", "member" : "scala.collection.TraversableLike.scan", "link" : "menu_commands\/Discard$.html#scan[B>:A,That](z:B)(op:(B,B)=>B)(implicitcbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Card) ⇒ K): Map[K, Stack[Card]]", "member" : "scala.collection.TraversableLike.groupBy", "link" : "menu_commands\/Discard$.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,Repr]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Card) ⇒ Boolean): (Stack[Card], Stack[Card])", "member" : "scala.collection.TraversableLike.partition", "link" : "menu_commands\/Discard$.html#partition(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Card, B])(bf: CanBuildFrom[Stack[Card], B, That]): That", "member" : "scala.collection.TraversableLike.collect", "link" : "menu_commands\/Discard$.html#collect[B,That](pf:PartialFunction[A,B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (Card) ⇒ Boolean): Stack[Card]", "member" : "scala.collection.TraversableLike.filterNot", "link" : "menu_commands\/Discard$.html#filterNot(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Card) ⇒ Boolean): Stack[Card]", "member" : "scala.collection.TraversableLike.filter", "link" : "menu_commands\/Discard$.html#filter(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Card) ⇒ GenTraversableOnce[B])(bf: CanBuildFrom[Stack[Card], B, That]): That", "member" : "scala.collection.TraversableLike.flatMap", "link" : "menu_commands\/Discard$.html#flatMap[B,That](f:A=>scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Card) ⇒ B)(bf: CanBuildFrom[Stack[Card], B, That]): That", "member" : "scala.collection.TraversableLike.map", "link" : "menu_commands\/Discard$.html#map[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: Traversable[B])(bf: CanBuildFrom[Stack[Card], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "menu_commands\/Discard$.html#++:[B>:A,That](that:Traversable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: TraversableOnce[B])(bf: CanBuildFrom[Stack[Card], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "menu_commands\/Discard$.html#++:[B>:A,That](that:scala.collection.TraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++", "tail" : "(that: GenTraversableOnce[B])(bf: CanBuildFrom[Stack[Card], B, That]): That", "member" : "scala.collection.TraversableLike.++", "link" : "menu_commands\/Discard$.html#++[B>:A,That](that:scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.hasDefiniteSize", "link" : "menu_commands\/Discard$.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.isTraversableAgain", "link" : "menu_commands\/Discard$.html#isTraversableAgain:Boolean", "kind" : "final def"}, {"label" : "repr", "tail" : "(): Stack[Card]", "member" : "scala.collection.TraversableLike.repr", "link" : "menu_commands\/Discard$.html#repr:Repr", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "scala.collection.TraversableLike.Self", "link" : "menu_commands\/Discard$.html#Self=Repr", "kind" : "type"}, {"label" : "par", "tail" : "(): ParSeq[Card]", "member" : "scala.collection.Parallelizable.par", "link" : "menu_commands\/Discard$.html#par:ParRepr", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "menu_commands\/Discard$.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "menu_commands\/Discard$.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "menu_commands\/Discard$.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "menu_commands\/Discard$.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "menu_commands\/Discard$.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "menu_commands\/Discard$.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Card, (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "menu_commands\/Discard$.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[Card]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "menu_commands\/Discard$.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "menu_commands\/Discard$.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "menu_commands\/Discard$.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[Card]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "menu_commands\/Discard$.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "menu_commands\/Discard$.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "menu_commands\/Discard$.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "menu_commands\/Discard$.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "menu_commands\/Discard$.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Card) ⇒ B)(cmp: Ordering[B]): Card", "member" : "scala.collection.TraversableOnce.minBy", "link" : "menu_commands\/Discard$.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Card) ⇒ B)(cmp: Ordering[B]): Card", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "menu_commands\/Discard$.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): Card", "member" : "scala.collection.TraversableOnce.max", "link" : "menu_commands\/Discard$.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): Card", "member" : "scala.collection.TraversableOnce.min", "link" : "menu_commands\/Discard$.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "menu_commands\/Discard$.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "menu_commands\/Discard$.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, Card) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "menu_commands\/Discard$.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "menu_commands\/Discard$.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "menu_commands\/Discard$.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "menu_commands\/Discard$.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Card, B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "menu_commands\/Discard$.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Card) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "menu_commands\/Discard$.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Card) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "menu_commands\/Discard$.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Card) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "menu_commands\/Discard$.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Card, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "menu_commands\/Discard$.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Card) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "menu_commands\/Discard$.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Card, B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "menu_commands\/Discard$.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Card) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "menu_commands\/Discard$.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "menu_commands\/Discard$.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[Card]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "menu_commands\/Discard$.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "menu_commands\/Discard$.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "menu_commands\/Discard$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "menu_commands\/Discard$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "menu_commands\/Discard$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "menu_commands\/Discard$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "menu_commands\/Discard$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "menu_commands\/Discard$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "menu_commands\/Discard$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Discard$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Discard$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Discard$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "menu_commands\/Discard$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "menu_commands\/Discard$.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "menu_commands\/Discard$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "menu_commands\/Discard$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "menu_commands\/Discard$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "menu_commands.Menu", "shortDescription" : "The menu is where all functionality for the GUI is pulled from.", "object" : "menu_commands\/Menu$.html", "members_object" : [{"label" : "showPOrder", "tail" : "(): String", "member" : "menu_commands.Menu.showPOrder", "link" : "menu_commands\/Menu$.html#showPOrder:String", "kind" : "def"}, {"label" : "showWinner", "tail" : "(): String", "member" : "menu_commands.Menu.showWinner", "link" : "menu_commands\/Menu$.html#showWinner:String", "kind" : "def"}, {"label" : "showGameArea", "tail" : "(): String", "member" : "menu_commands.Menu.showGameArea", "link" : "menu_commands\/Menu$.html#showGameArea:String", "kind" : "def"}, {"label" : "doGame", "tail" : "(): Unit", "member" : "menu_commands.Menu.doGame", "link" : "menu_commands\/Menu$.html#doGame:Unit", "kind" : "def"}, {"label" : "doTurn", "tail" : "(): Unit", "member" : "menu_commands.Menu.doTurn", "link" : "menu_commands\/Menu$.html#doTurn:Unit", "kind" : "def"}, {"label" : "doMove", "tail" : "(): Unit", "member" : "menu_commands.Menu.doMove", "link" : "menu_commands\/Menu$.html#doMove:Unit", "kind" : "def"}, {"label" : "bluffFLAG", "tail" : ": Boolean", "member" : "menu_commands.Menu.bluffFLAG", "link" : "menu_commands\/Menu$.html#bluffFLAG:Boolean", "kind" : "var"}, {"label" : "showALLplayerSTRATEGY", "tail" : "(): String", "member" : "menu_commands.Menu.showALLplayerSTRATEGY", "link" : "menu_commands\/Menu$.html#showALLplayerSTRATEGY:String", "kind" : "def"}, {"label" : "checkForWinner", "tail" : "(): Boolean", "member" : "menu_commands.Menu.checkForWinner", "link" : "menu_commands\/Menu$.html#checkForWinner:Boolean", "kind" : "def"}, {"label" : "initializeRAND", "tail" : "(): String", "member" : "menu_commands.Menu.initializeRAND", "link" : "menu_commands\/Menu$.html#initializeRAND:String", "kind" : "def"}, {"label" : "initialize", "tail" : "(): String", "member" : "menu_commands.Menu.initialize", "link" : "menu_commands\/Menu$.html#initialize:String", "kind" : "def"}, {"label" : "SetStrat", "tail" : "(p: Player, agressLEVEL: Int): Unit", "member" : "menu_commands.Menu.SetStrat", "link" : "menu_commands\/Menu$.html#SetStrat(p:menu_commands.Player,agressLEVEL:Int):Unit", "kind" : "def"}, {"label" : "cardsOUT", "tail" : "(): String", "member" : "menu_commands.Menu.cardsOUT", "link" : "menu_commands\/Menu$.html#cardsOUT:String", "kind" : "def"}, {"label" : "advancePlayerOrder", "tail" : "(): Unit", "member" : "menu_commands.Menu.advancePlayerOrder", "link" : "menu_commands\/Menu$.html#advancePlayerOrder:Unit", "kind" : "def"}, {"label" : "showPlayerOrder", "tail" : "(): String", "member" : "menu_commands.Menu.showPlayerOrder", "link" : "menu_commands\/Menu$.html#showPlayerOrder:String", "kind" : "def"}, {"label" : "bluffMode", "tail" : ": Boolean", "member" : "menu_commands.Menu.bluffMode", "link" : "menu_commands\/Menu$.html#bluffMode:Boolean", "kind" : "var"}, {"label" : "showcards", "tail" : ": Boolean", "member" : "menu_commands.Menu.showcards", "link" : "menu_commands\/Menu$.html#showcards:Boolean", "kind" : "var"}, {"label" : "exitGame", "tail" : ": Boolean", "member" : "menu_commands.Menu.exitGame", "link" : "menu_commands\/Menu$.html#exitGame:Boolean", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "menu_commands\/Menu$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "menu_commands\/Menu$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "menu_commands\/Menu$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "menu_commands\/Menu$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "menu_commands\/Menu$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "menu_commands\/Menu$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "menu_commands\/Menu$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Menu$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Menu$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Menu$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "menu_commands\/Menu$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "menu_commands\/Menu$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "menu_commands\/Menu$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "menu_commands\/Menu$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "menu_commands\/Menu$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "menu_commands\/Menu$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "menu_commands\/Menu$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "menu_commands\/Menu$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "menu_commands\/Menu$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "menu_commands.Player", "shortDescription" : "A player in the game.", "members_class" : [{"label" : "callBluff", "tail" : "(): Unit", "member" : "menu_commands.Player.callBluff", "link" : "menu_commands\/Player.html#callBluff:Unit", "kind" : "def"}, {"label" : "setStrategy", "tail" : "(howAgressive: Int): Unit", "member" : "menu_commands.Player.setStrategy", "link" : "menu_commands\/Player.html#setStrategy(howAgressive:Int):Unit", "kind" : "def"}, {"label" : "showSCORE", "tail" : "(): String", "member" : "menu_commands.Player.showSCORE", "link" : "menu_commands\/Player.html#showSCORE:String", "kind" : "def"}, {"label" : "playCard", "tail" : "(): Unit", "member" : "menu_commands.Player.playCard", "link" : "menu_commands\/Player.html#playCard:Unit", "kind" : "def"}, {"label" : "bluff", "tail" : "(): Unit", "member" : "menu_commands.Player.bluff", "link" : "menu_commands\/Player.html#bluff:Unit", "kind" : "def"}, {"label" : "bluffCalled", "tail" : "(): Unit", "member" : "menu_commands.Player.bluffCalled", "link" : "menu_commands\/Player.html#bluffCalled:Unit", "kind" : "def"}, {"label" : "score", "tail" : ": Int", "member" : "menu_commands.Player.score", "link" : "menu_commands\/Player.html#score:Int", "kind" : "var"}, {"label" : "addCard", "tail" : "(): Unit", "member" : "menu_commands.Player.addCard", "link" : "menu_commands\/Player.html#addCard:Unit", "kind" : "def"}, {"label" : "bluffer", "tail" : ": Boolean", "member" : "menu_commands.Player.bluffer", "link" : "menu_commands\/Player.html#bluffer:Boolean", "kind" : "var"}, {"label" : "inIT", "tail" : "(): Unit", "member" : "menu_commands.Player.inIT", "link" : "menu_commands\/Player.html#inIT:Unit", "kind" : "def"}, {"label" : "myHand", "tail" : ": ListBuffer[Card]", "member" : "menu_commands.Player.myHand", "link" : "menu_commands\/Player.html#myHand:scala.collection.mutable.ListBuffer[menu_commands.Card]", "kind" : "var"}, {"label" : "howAgress", "tail" : ": Int", "member" : "menu_commands.Player.howAgress", "link" : "menu_commands\/Player.html#howAgress:Int", "kind" : "var"}, {"member" : "menu_commands.Player#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "menu_commands.Player.name", "link" : "menu_commands\/Player.html#name:String", "kind" : "val"}, {"label" : "num", "tail" : ": Int", "member" : "menu_commands.Player.num", "link" : "menu_commands\/Player.html#num:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "menu_commands\/Player.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "menu_commands\/Player.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "menu_commands\/Player.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "menu_commands\/Player.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "menu_commands\/Player.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "menu_commands\/Player.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "menu_commands\/Player.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Player.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Player.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/Player.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "menu_commands\/Player.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "menu_commands\/Player.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "menu_commands\/Player.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "menu_commands\/Player.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "menu_commands\/Player.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "menu_commands\/Player.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "menu_commands\/Player.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "menu_commands\/Player.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "menu_commands\/Player.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "menu_commands\/Player.html", "kind" : "class"}, {"name" : "menu_commands.PlayerOrder", "shortDescription" : "A queue which holds the players in the game.", "object" : "menu_commands\/PlayerOrder$.html", "members_object" : [{"label" : "WithFilter", "tail" : "", "member" : "scala.collection.TraversableLike.WithFilter", "link" : "menu_commands\/PlayerOrder$.html#WithFilterextendsFilterMonadic[A,Repr]", "kind" : "class"}, {"label" : "previous", "tail" : "(): Player", "member" : "menu_commands.PlayerOrder.previous", "link" : "menu_commands\/PlayerOrder$.html#previous:menu_commands.Player", "kind" : "def"}, {"label" : "current", "tail" : "(): Player", "member" : "menu_commands.PlayerOrder.current", "link" : "menu_commands\/PlayerOrder$.html#current:menu_commands.Player", "kind" : "def"}, {"label" : "doMovePO", "tail" : "(): Unit", "member" : "menu_commands.PlayerOrder.doMovePO", "link" : "menu_commands\/PlayerOrder$.html#doMovePO:Unit", "kind" : "def"}, {"label" : "showCards", "tail" : "(): String", "member" : "menu_commands.PlayerOrder.showCards", "link" : "menu_commands\/PlayerOrder$.html#showCards:String", "kind" : "def"}, {"label" : "show", "tail" : "(): String", "member" : "menu_commands.PlayerOrder.show", "link" : "menu_commands\/PlayerOrder$.html#show:String", "kind" : "def"}, {"label" : "showDescription", "tail" : "(): String", "member" : "menu_commands.PlayerOrder.showDescription", "link" : "menu_commands\/PlayerOrder$.html#showDescription:String", "kind" : "def"}, {"label" : "advance", "tail" : "(): Unit", "member" : "menu_commands.PlayerOrder.advance", "link" : "menu_commands\/PlayerOrder$.html#advance:Unit", "kind" : "def"}, {"label" : "inIT", "tail" : "(): Unit", "member" : "menu_commands.PlayerOrder.inIT", "link" : "menu_commands\/PlayerOrder$.html#inIT:Unit", "kind" : "def"}, {"label" : "clone", "tail" : "(): Queue[Player]", "member" : "scala.collection.mutable.Queue.clone", "link" : "menu_commands\/PlayerOrder$.html#clone():scala.collection.mutable.Queue[A]", "kind" : "def"}, {"label" : "tail", "tail" : "(): Queue[Player]", "member" : "scala.collection.mutable.Queue.tail", "link" : "menu_commands\/PlayerOrder$.html#tail:scala.collection.mutable.Queue[A]", "kind" : "def"}, {"label" : "front", "tail" : "(): Player", "member" : "scala.collection.mutable.Queue.front", "link" : "menu_commands\/PlayerOrder$.html#front:A", "kind" : "def"}, {"label" : "extractFirst", "tail" : "(start: LinkedList[Player], p: (Player) ⇒ Boolean): Option[LinkedList[Player]]", "member" : "scala.collection.mutable.Queue.extractFirst", "link" : "menu_commands\/PlayerOrder$.html#extractFirst(start:scala.collection.mutable.LinkedList[A],p:A=>Boolean):Option[scala.collection.mutable.LinkedList[A]]", "kind" : "def"}, {"label" : "dequeueAll", "tail" : "(p: (Player) ⇒ Boolean): Seq[Player]", "member" : "scala.collection.mutable.Queue.dequeueAll", "link" : "menu_commands\/PlayerOrder$.html#dequeueAll(p:A=>Boolean):scala.collection.mutable.Seq[A]", "kind" : "def"}, {"label" : "dequeueFirst", "tail" : "(p: (Player) ⇒ Boolean): Option[Player]", "member" : "scala.collection.mutable.Queue.dequeueFirst", "link" : "menu_commands\/PlayerOrder$.html#dequeueFirst(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "dequeue", "tail" : "(): Player", "member" : "scala.collection.mutable.Queue.dequeue", "link" : "menu_commands\/PlayerOrder$.html#dequeue():A", "kind" : "def"}, {"label" : "enqueue", "tail" : "(elems: Player*): Unit", "member" : "scala.collection.mutable.Queue.enqueue", "link" : "menu_commands\/PlayerOrder$.html#enqueue(elems:A*):Unit", "kind" : "def"}, {"label" : "newBuilder", "tail" : "(): Builder[Player, Queue[Player]]", "member" : "scala.collection.mutable.Queue.newBuilder", "link" : "menu_commands\/PlayerOrder$.html#newBuilder:scala.collection.mutable.Builder[A,scala.collection.mutable.Queue[A]]", "kind" : "def"}, {"label" : "companion", "tail" : "(): GenericCompanion[Queue]", "member" : "scala.collection.mutable.Queue.companion", "link" : "menu_commands\/PlayerOrder$.html#companion:scala.collection.generic.GenericCompanion[scala.collection.mutable.Queue]", "kind" : "def"}, {"label" : "result", "tail" : "(): MutableList[Player]", "member" : "scala.collection.mutable.MutableList.result", "link" : "menu_commands\/PlayerOrder$.html#result():scala.collection.mutable.MutableList[A]", "kind" : "def"}, {"label" : "clear", "tail" : "(): Unit", "member" : "scala.collection.mutable.MutableList.clear", "link" : "menu_commands\/PlayerOrder$.html#clear():Unit", "kind" : "def"}, {"label" : "+=", "tail" : "(elem: Player): PlayerOrder.this.type", "member" : "scala.collection.mutable.MutableList.+=", "link" : "menu_commands\/PlayerOrder$.html#+=(elem:A):MutableList.this.type", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Player]", "member" : "scala.collection.mutable.MutableList.toList", "link" : "menu_commands\/PlayerOrder$.html#toList:List[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): Player", "member" : "scala.collection.mutable.MutableList.last", "link" : "menu_commands\/PlayerOrder$.html#last:A", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[Player]", "member" : "scala.collection.mutable.MutableList.iterator", "link" : "menu_commands\/PlayerOrder$.html#iterator:Iterator[A]", "kind" : "def"}, {"label" : "appendElem", "tail" : "(elem: Player): Unit", "member" : "scala.collection.mutable.MutableList.appendElem", "link" : "menu_commands\/PlayerOrder$.html#appendElem(elem:A):Unit", "kind" : "def"}, {"label" : "prependElem", "tail" : "(elem: Player): Unit", "member" : "scala.collection.mutable.MutableList.prependElem", "link" : "menu_commands\/PlayerOrder$.html#prependElem(elem:A):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(n: Int): Option[Player]", "member" : "scala.collection.mutable.MutableList.get", "link" : "menu_commands\/PlayerOrder$.html#get(n:Int):Option[A]", "kind" : "def"}, {"label" : "update", "tail" : "(n: Int, x: Player): Unit", "member" : "scala.collection.mutable.MutableList.update", "link" : "menu_commands\/PlayerOrder$.html#update(n:Int,x:A):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(n: Int): Player", "member" : "scala.collection.mutable.MutableList.apply", "link" : "menu_commands\/PlayerOrder$.html#apply(n:Int):A", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.mutable.MutableList.length", "link" : "menu_commands\/PlayerOrder$.html#length:Int", "kind" : "def"}, {"label" : "+=:", "tail" : "(elem: Player): PlayerOrder.this.type", "member" : "scala.collection.mutable.MutableList.+=:", "link" : "menu_commands\/PlayerOrder$.html#+=:(elem:A):MutableList.this.type", "kind" : "def"}, {"label" : "tailImpl", "tail" : "(tl: MutableList[Player]): Unit", "member" : "scala.collection.mutable.MutableList.tailImpl", "link" : "menu_commands\/PlayerOrder$.html#tailImpl(tl:scala.collection.mutable.MutableList[A]):Unit", "kind" : "final def"}, {"label" : "head", "tail" : "(): Player", "member" : "scala.collection.mutable.MutableList.head", "link" : "menu_commands\/PlayerOrder$.html#head:A", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.mutable.MutableList.isEmpty", "link" : "menu_commands\/PlayerOrder$.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "toQueue", "tail" : "(): Queue[Player]", "member" : "scala.collection.mutable.MutableList.toQueue", "link" : "menu_commands\/PlayerOrder$.html#toQueue:scala.collection.mutable.Queue[A]", "kind" : "def"}, {"label" : "len", "tail" : ": Int", "member" : "scala.collection.mutable.MutableList.len", "link" : "menu_commands\/PlayerOrder$.html#len:Int", "kind" : "var"}, {"label" : "last0", "tail" : ": LinkedList[Player]", "member" : "scala.collection.mutable.MutableList.last0", "link" : "menu_commands\/PlayerOrder$.html#last0:scala.collection.mutable.LinkedList[A]", "kind" : "var"}, {"label" : "first0", "tail" : ": LinkedList[Player]", "member" : "scala.collection.mutable.MutableList.first0", "link" : "menu_commands\/PlayerOrder$.html#first0:scala.collection.mutable.LinkedList[A]", "kind" : "var"}, {"label" : "mapResult", "tail" : "(f: (MutableList[Player]) ⇒ NewTo): Builder[Player, NewTo]", "member" : "scala.collection.mutable.Builder.mapResult", "link" : "menu_commands\/PlayerOrder$.html#mapResult[NewTo](f:To=>NewTo):scala.collection.mutable.Builder[Elem,NewTo]", "kind" : "def"}, {"label" : "sizeHintBounded", "tail" : "(size: Int, boundingColl: TraversableLike[_, _]): Unit", "member" : "scala.collection.mutable.Builder.sizeHintBounded", "link" : "menu_commands\/PlayerOrder$.html#sizeHintBounded(size:Int,boundingColl:scala.collection.TraversableLike[_,_]):Unit", "kind" : "def"}, {"label" : "sizeHint", "tail" : "(coll: TraversableLike[_, _], delta: Int): Unit", "member" : "scala.collection.mutable.Builder.sizeHint", "link" : "menu_commands\/PlayerOrder$.html#sizeHint(coll:scala.collection.TraversableLike[_,_],delta:Int):Unit", "kind" : "def"}, {"label" : "sizeHint", "tail" : "(coll: TraversableLike[_, _]): Unit", "member" : "scala.collection.mutable.Builder.sizeHint", "link" : "menu_commands\/PlayerOrder$.html#sizeHint(coll:scala.collection.TraversableLike[_,_]):Unit", "kind" : "def"}, {"label" : "sizeHint", "tail" : "(size: Int): Unit", "member" : "scala.collection.mutable.Builder.sizeHint", "link" : "menu_commands\/PlayerOrder$.html#sizeHint(size:Int):Unit", "kind" : "def"}, {"label" : "++=", "tail" : "(xs: TraversableOnce[Player]): PlayerOrder.this.type", "member" : "scala.collection.generic.Growable.++=", "link" : "menu_commands\/PlayerOrder$.html#++=(xs:scala.collection.TraversableOnce[A]):Growable.this.type", "kind" : "def"}, {"label" : "+=", "tail" : "(elem1: Player, elem2: Player, elems: Player*): PlayerOrder.this.type", "member" : "scala.collection.generic.Growable.+=", "link" : "menu_commands\/PlayerOrder$.html#+=(elem1:A,elem2:A,elems:A*):Growable.this.type", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (Player) ⇒ Boolean, end: Int): Int", "member" : "scala.collection.LinearSeqOptimized.lastIndexWhere", "link" : "menu_commands\/PlayerOrder$.html#lastIndexWhere(p:A=>Boolean,end:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Player) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.LinearSeqOptimized.indexWhere", "link" : "menu_commands\/PlayerOrder$.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "segmentLength", "tail" : "(p: (Player) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.LinearSeqOptimized.segmentLength", "link" : "menu_commands\/PlayerOrder$.html#segmentLength(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "isDefinedAt", "tail" : "(x: Int): Boolean", "member" : "scala.collection.LinearSeqOptimized.isDefinedAt", "link" : "menu_commands\/PlayerOrder$.html#isDefinedAt(x:Int):Boolean", "kind" : "def"}, {"label" : "lengthCompare", "tail" : "(len: Int): Int", "member" : "scala.collection.LinearSeqOptimized.lengthCompare", "link" : "menu_commands\/PlayerOrder$.html#lengthCompare(len:Int):Int", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: GenIterable[B]): Boolean", "member" : "scala.collection.LinearSeqOptimized.sameElements", "link" : "menu_commands\/PlayerOrder$.html#sameElements[B>:A](that:scala.collection.GenIterable[B]):Boolean", "kind" : "def"}, {"label" : "span", "tail" : "(p: (Player) ⇒ Boolean): (Queue[Player], Queue[Player])", "member" : "scala.collection.LinearSeqOptimized.span", "link" : "menu_commands\/PlayerOrder$.html#span(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (Player) ⇒ Boolean): Queue[Player]", "member" : "scala.collection.LinearSeqOptimized.takeWhile", "link" : "menu_commands\/PlayerOrder$.html#takeWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Queue[Player]", "member" : "scala.collection.LinearSeqOptimized.slice", "link" : "menu_commands\/PlayerOrder$.html#slice(from:Int,until:Int):Repr", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): Queue[Player]", "member" : "scala.collection.LinearSeqOptimized.dropRight", "link" : "menu_commands\/PlayerOrder$.html#dropRight(n:Int):Repr", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Queue[Player]", "member" : "scala.collection.LinearSeqOptimized.drop", "link" : "menu_commands\/PlayerOrder$.html#drop(n:Int):Repr", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Queue[Player]", "member" : "scala.collection.LinearSeqOptimized.take", "link" : "menu_commands\/PlayerOrder$.html#take(n:Int):Repr", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (Player, B) ⇒ B): B", "member" : "scala.collection.LinearSeqOptimized.reduceRight", "link" : "menu_commands\/PlayerOrder$.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, Player) ⇒ B): B", "member" : "scala.collection.LinearSeqOptimized.reduceLeft", "link" : "menu_commands\/PlayerOrder$.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (Player, B) ⇒ B): B", "member" : "scala.collection.LinearSeqOptimized.foldRight", "link" : "menu_commands\/PlayerOrder$.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, Player) ⇒ B): B", "member" : "scala.collection.LinearSeqOptimized.foldLeft", "link" : "menu_commands\/PlayerOrder$.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (Player) ⇒ Boolean): Option[Player]", "member" : "scala.collection.LinearSeqOptimized.find", "link" : "menu_commands\/PlayerOrder$.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: A1): Boolean", "member" : "scala.collection.LinearSeqOptimized.contains", "link" : "menu_commands\/PlayerOrder$.html#contains[A1>:A](elem:A1):Boolean", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (Player) ⇒ Boolean): Boolean", "member" : "scala.collection.LinearSeqOptimized.exists", "link" : "menu_commands\/PlayerOrder$.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (Player) ⇒ Boolean): Boolean", "member" : "scala.collection.LinearSeqOptimized.forall", "link" : "menu_commands\/PlayerOrder$.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Player) ⇒ U): Unit", "member" : "scala.collection.LinearSeqOptimized.foreach", "link" : "menu_commands\/PlayerOrder$.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "seq", "tail" : "(): LinearSeq[Player]", "member" : "scala.collection.mutable.LinearSeq.seq", "link" : "menu_commands\/PlayerOrder$.html#seq:scala.collection.mutable.LinearSeq[A]", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: GenSeq[B])(p: (Player, B) ⇒ Boolean): Boolean", "member" : "scala.collection.LinearSeqLike.corresponds", "link" : "menu_commands\/PlayerOrder$.html#corresponds[B](that:scala.collection.GenSeq[B])(p:(A,B)=>Boolean):Boolean", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.collection.LinearSeqLike.hashCode", "link" : "menu_commands\/PlayerOrder$.html#hashCode():Int", "kind" : "def"}, {"label" : "toCollection", "tail" : "(repr: Queue[Player]): LinearSeq[Player]", "member" : "scala.collection.LinearSeqLike.toCollection", "link" : "menu_commands\/PlayerOrder$.html#toCollection(repr:Repr):scala.collection.LinearSeq[A]", "kind" : "def"}, {"label" : "thisCollection", "tail" : "(): LinearSeq[Player]", "member" : "scala.collection.LinearSeqLike.thisCollection", "link" : "menu_commands\/PlayerOrder$.html#thisCollection:scala.collection.LinearSeq[A]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (Player) ⇒ Player): PlayerOrder.this.type", "member" : "scala.collection.mutable.SeqLike.transform", "link" : "menu_commands\/PlayerOrder$.html#transform(f:A=>A):SeqLike.this.type", "kind" : "def"}, {"label" : "parCombiner", "tail" : "(): Combiner[Player, ParSeq[Player]]", "member" : "scala.collection.mutable.SeqLike.parCombiner", "link" : "menu_commands\/PlayerOrder$.html#parCombiner:scala.collection.parallel.Combiner[A,scala.collection.parallel.mutable.ParSeq[A]]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.SeqLike.toString", "link" : "menu_commands\/PlayerOrder$.html#toString():String", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): SeqView[Player, Queue[Player]]", "member" : "scala.collection.SeqLike.view", "link" : "menu_commands\/PlayerOrder$.html#view(from:Int,until:Int):scala.collection.SeqView[A,Repr]", "kind" : "def"}, {"label" : "view", "tail" : "(): SeqView[Player, Queue[Player]]", "member" : "scala.collection.SeqLike.view", "link" : "menu_commands\/PlayerOrder$.html#view:scala.collection.SeqView[A,Repr]", "kind" : "def"}, {"label" : "indices", "tail" : "(): Range", "member" : "scala.collection.SeqLike.indices", "link" : "menu_commands\/PlayerOrder$.html#indices:scala.collection.immutable.Range", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[Player]", "member" : "scala.collection.SeqLike.toSeq", "link" : "menu_commands\/PlayerOrder$.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "sorted", "tail" : "(ord: Ordering[B]): Queue[Player]", "member" : "scala.collection.SeqLike.sorted", "link" : "menu_commands\/PlayerOrder$.html#sorted[B>:A](implicitord:scala.math.Ordering[B]):Repr", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (Player) ⇒ B)(ord: Ordering[B]): Queue[Player]", "member" : "scala.collection.SeqLike.sortBy", "link" : "menu_commands\/PlayerOrder$.html#sortBy[B](f:A=>B)(implicitord:scala.math.Ordering[B]):Repr", "kind" : "def"}, {"label" : "sortWith", "tail" : "(lt: (Player, Player) ⇒ Boolean): Queue[Player]", "member" : "scala.collection.SeqLike.sortWith", "link" : "menu_commands\/PlayerOrder$.html#sortWith(lt:(A,A)=>Boolean):Repr", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: B)(bf: CanBuildFrom[Queue[Player], B, That]): That", "member" : "scala.collection.SeqLike.padTo", "link" : "menu_commands\/PlayerOrder$.html#padTo[B>:A,That](len:Int,elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : ":+", "tail" : "(elem: B)(bf: CanBuildFrom[Queue[Player], B, That]): That", "member" : "scala.collection.SeqLike.:+", "link" : "menu_commands\/PlayerOrder$.html#:+[B>:A,That](elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "+:", "tail" : "(elem: B)(bf: CanBuildFrom[Queue[Player], B, That]): That", "member" : "scala.collection.SeqLike.+:", "link" : "menu_commands\/PlayerOrder$.html#+:[B>:A,That](elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "updated", "tail" : "(index: Int, elem: B)(bf: CanBuildFrom[Queue[Player], B, That]): That", "member" : "scala.collection.SeqLike.updated", "link" : "menu_commands\/PlayerOrder$.html#updated[B>:A,That](index:Int,elem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, patch: GenSeq[B], replaced: Int)(bf: CanBuildFrom[Queue[Player], B, That]): That", "member" : "scala.collection.SeqLike.patch", "link" : "menu_commands\/PlayerOrder$.html#patch[B>:A,That](from:Int,patch:scala.collection.GenSeq[B],replaced:Int)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Queue[Player]", "member" : "scala.collection.SeqLike.distinct", "link" : "menu_commands\/PlayerOrder$.html#distinct:Repr", "kind" : "def"}, {"label" : "intersect", "tail" : "(that: GenSeq[B]): Queue[Player]", "member" : "scala.collection.SeqLike.intersect", "link" : "menu_commands\/PlayerOrder$.html#intersect[B>:A](that:scala.collection.GenSeq[B]):Repr", "kind" : "def"}, {"label" : "diff", "tail" : "(that: GenSeq[B]): Queue[Player]", "member" : "scala.collection.SeqLike.diff", "link" : "menu_commands\/PlayerOrder$.html#diff[B>:A](that:scala.collection.GenSeq[B]):Repr", "kind" : "def"}, {"label" : "union", "tail" : "(that: GenSeq[B])(bf: CanBuildFrom[Queue[Player], B, That]): That", "member" : "scala.collection.SeqLike.union", "link" : "menu_commands\/PlayerOrder$.html#union[B>:A,That](that:scala.collection.GenSeq[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "containsSlice", "tail" : "(that: GenSeq[B]): Boolean", "member" : "scala.collection.SeqLike.containsSlice", "link" : "menu_commands\/PlayerOrder$.html#containsSlice[B](that:scala.collection.GenSeq[B]):Boolean", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: GenSeq[B], end: Int): Int", "member" : "scala.collection.SeqLike.lastIndexOfSlice", "link" : "menu_commands\/PlayerOrder$.html#lastIndexOfSlice[B>:A](that:scala.collection.GenSeq[B],end:Int):Int", "kind" : "def"}, {"label" : "lastIndexOfSlice", "tail" : "(that: GenSeq[B]): Int", "member" : "scala.collection.SeqLike.lastIndexOfSlice", "link" : "menu_commands\/PlayerOrder$.html#lastIndexOfSlice[B>:A](that:scala.collection.GenSeq[B]):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: GenSeq[B], from: Int): Int", "member" : "scala.collection.SeqLike.indexOfSlice", "link" : "menu_commands\/PlayerOrder$.html#indexOfSlice[B>:A](that:scala.collection.GenSeq[B],from:Int):Int", "kind" : "def"}, {"label" : "indexOfSlice", "tail" : "(that: GenSeq[B]): Int", "member" : "scala.collection.SeqLike.indexOfSlice", "link" : "menu_commands\/PlayerOrder$.html#indexOfSlice[B>:A](that:scala.collection.GenSeq[B]):Int", "kind" : "def"}, {"label" : "endsWith", "tail" : "(that: GenSeq[B]): Boolean", "member" : "scala.collection.SeqLike.endsWith", "link" : "menu_commands\/PlayerOrder$.html#endsWith[B](that:scala.collection.GenSeq[B]):Boolean", "kind" : "def"}, {"label" : "startsWith", "tail" : "(that: GenSeq[B], offset: Int): Boolean", "member" : "scala.collection.SeqLike.startsWith", "link" : "menu_commands\/PlayerOrder$.html#startsWith[B](that:scala.collection.GenSeq[B],offset:Int):Boolean", "kind" : "def"}, {"label" : "reverseIterator", "tail" : "(): Iterator[Player]", "member" : "scala.collection.SeqLike.reverseIterator", "link" : "menu_commands\/PlayerOrder$.html#reverseIterator:Iterator[A]", "kind" : "def"}, {"label" : "reverseMap", "tail" : "(f: (Player) ⇒ B)(bf: CanBuildFrom[Queue[Player], B, That]): That", "member" : "scala.collection.SeqLike.reverseMap", "link" : "menu_commands\/PlayerOrder$.html#reverseMap[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "reverse", "tail" : "(): Queue[Player]", "member" : "scala.collection.SeqLike.reverse", "link" : "menu_commands\/PlayerOrder$.html#reverse:Repr", "kind" : "def"}, {"label" : "combinations", "tail" : "(n: Int): Iterator[Queue[Player]]", "member" : "scala.collection.SeqLike.combinations", "link" : "menu_commands\/PlayerOrder$.html#combinations(n:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "permutations", "tail" : "(): Iterator[Queue[Player]]", "member" : "scala.collection.SeqLike.permutations", "link" : "menu_commands\/PlayerOrder$.html#permutations:Iterator[Repr]", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.SeqLike.size", "link" : "menu_commands\/PlayerOrder$.html#size:Int", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "scala.collection.GenSeqLike.equals", "link" : "menu_commands\/PlayerOrder$.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "startsWith", "tail" : "(that: GenSeq[B]): Boolean", "member" : "scala.collection.GenSeqLike.startsWith", "link" : "menu_commands\/PlayerOrder$.html#startsWith[B](that:scala.collection.GenSeq[B]):Boolean", "kind" : "def"}, {"label" : "lastIndexWhere", "tail" : "(p: (Player) ⇒ Boolean): Int", "member" : "scala.collection.GenSeqLike.lastIndexWhere", "link" : "menu_commands\/PlayerOrder$.html#lastIndexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(elem: B, end: Int): Int", "member" : "scala.collection.GenSeqLike.lastIndexOf", "link" : "menu_commands\/PlayerOrder$.html#lastIndexOf[B>:A](elem:B,end:Int):Int", "kind" : "def"}, {"label" : "lastIndexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.GenSeqLike.lastIndexOf", "link" : "menu_commands\/PlayerOrder$.html#lastIndexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.GenSeqLike.indexOf", "link" : "menu_commands\/PlayerOrder$.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.GenSeqLike.indexOf", "link" : "menu_commands\/PlayerOrder$.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (Player) ⇒ Boolean): Int", "member" : "scala.collection.GenSeqLike.indexWhere", "link" : "menu_commands\/PlayerOrder$.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "prefixLength", "tail" : "(p: (Player) ⇒ Boolean): Int", "member" : "scala.collection.GenSeqLike.prefixLength", "link" : "menu_commands\/PlayerOrder$.html#prefixLength(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "runWith", "tail" : "(action: (Player) ⇒ U): (Int) ⇒ Boolean", "member" : "scala.PartialFunction.runWith", "link" : "menu_commands\/PlayerOrder$.html#runWith[U](action:B=>U):A=>Boolean", "kind" : "def"}, {"label" : "applyOrElse", "tail" : "(x: A1, default: (A1) ⇒ B1): B1", "member" : "scala.PartialFunction.applyOrElse", "link" : "menu_commands\/PlayerOrder$.html#applyOrElse[A1<:A,B1>:B](x:A1,default:A1=>B1):B1", "kind" : "def"}, {"label" : "lift", "tail" : "(): (Int) ⇒ Option[Player]", "member" : "scala.PartialFunction.lift", "link" : "menu_commands\/PlayerOrder$.html#lift:A=>Option[B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(k: (Player) ⇒ C): PartialFunction[Int, C]", "member" : "scala.PartialFunction.andThen", "link" : "menu_commands\/PlayerOrder$.html#andThen[C](k:B=>C):PartialFunction[A,C]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: PartialFunction[A1, B1]): PartialFunction[A1, B1]", "member" : "scala.PartialFunction.orElse", "link" : "menu_commands\/PlayerOrder$.html#orElse[A1<:A,B1>:B](that:PartialFunction[A1,B1]):PartialFunction[A1,B1]", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Int): (A) ⇒ Player", "member" : "scala.Function1.compose", "link" : "menu_commands\/PlayerOrder$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.IterableLike.canEqual", "link" : "menu_commands\/PlayerOrder$.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[Player]", "member" : "scala.collection.IterableLike.toStream", "link" : "menu_commands\/PlayerOrder$.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(bf: CanBuildFrom[Queue[Player], (A1, Int), That]): That", "member" : "scala.collection.IterableLike.zipWithIndex", "link" : "menu_commands\/PlayerOrder$.html#zipWithIndex[A1>:A,That](implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,Int),That]):That", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: GenIterable[B], thisElem: A1, thatElem: B)(bf: CanBuildFrom[Queue[Player], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zipAll", "link" : "menu_commands\/PlayerOrder$.html#zipAll[B,A1>:A,That](that:scala.collection.GenIterable[B],thisElem:A1,thatElem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "zip", "tail" : "(that: GenIterable[B])(bf: CanBuildFrom[Queue[Player], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zip", "link" : "menu_commands\/PlayerOrder$.html#zip[A1>:A,B,That](that:scala.collection.GenIterable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.IterableLike.copyToArray", "link" : "menu_commands\/PlayerOrder$.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): Queue[Player]", "member" : "scala.collection.IterableLike.takeRight", "link" : "menu_commands\/PlayerOrder$.html#takeRight(n:Int):Repr", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[Queue[Player]]", "member" : "scala.collection.IterableLike.sliding", "link" : "menu_commands\/PlayerOrder$.html#sliding(size:Int,step:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[Queue[Player]]", "member" : "scala.collection.IterableLike.sliding", "link" : "menu_commands\/PlayerOrder$.html#sliding(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[Queue[Player]]", "member" : "scala.collection.IterableLike.grouped", "link" : "menu_commands\/PlayerOrder$.html#grouped(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[Player]", "member" : "scala.collection.IterableLike.toIterator", "link" : "menu_commands\/PlayerOrder$.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[Player]", "member" : "scala.collection.IterableLike.toIterable", "link" : "menu_commands\/PlayerOrder$.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "transpose", "tail" : "(asTraversable: (Player) ⇒ GenTraversableOnce[B]): Queue[Queue[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.transpose", "link" : "menu_commands\/PlayerOrder$.html#transpose[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asTraversable: (Player) ⇒ GenTraversableOnce[B]): Queue[B]", "member" : "scala.collection.generic.GenericTraversableTemplate.flatten", "link" : "menu_commands\/PlayerOrder$.html#flatten[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: (Player) ⇒ (A1, A2, A3)): (Queue[A1], Queue[A2], Queue[A3])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip3", "link" : "menu_commands\/PlayerOrder$.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: (Player) ⇒ (A1, A2)): (Queue[A1], Queue[A2])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip", "link" : "menu_commands\/PlayerOrder$.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "genericBuilder", "tail" : "(): Builder[B, Queue[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.genericBuilder", "link" : "menu_commands\/PlayerOrder$.html#genericBuilder[B]:scala.collection.mutable.Builder[B,CC[B]]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (Player) ⇒ Boolean): FilterMonadic[Player, Queue[Player]]", "member" : "scala.collection.TraversableLike.withFilter", "link" : "menu_commands\/PlayerOrder$.html#withFilter(p:A=>Boolean):scala.collection.generic.FilterMonadic[A,Repr]", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.TraversableLike.stringPrefix", "link" : "menu_commands\/PlayerOrder$.html#stringPrefix:String", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, Player, Col[Player]]): Col[Player]", "member" : "scala.collection.TraversableLike.to", "link" : "menu_commands\/PlayerOrder$.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[Player]", "member" : "scala.collection.TraversableLike.toTraversable", "link" : "menu_commands\/PlayerOrder$.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[Queue[Player]]", "member" : "scala.collection.TraversableLike.inits", "link" : "menu_commands\/PlayerOrder$.html#inits:Iterator[Repr]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[Queue[Player]]", "member" : "scala.collection.TraversableLike.tails", "link" : "menu_commands\/PlayerOrder$.html#tails:Iterator[Repr]", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Queue[Player], Queue[Player])", "member" : "scala.collection.TraversableLike.splitAt", "link" : "menu_commands\/PlayerOrder$.html#splitAt(n:Int):(Repr,Repr)", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (Player) ⇒ Boolean): Queue[Player]", "member" : "scala.collection.TraversableLike.dropWhile", "link" : "menu_commands\/PlayerOrder$.html#dropWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "init", "tail" : "(): Queue[Player]", "member" : "scala.collection.TraversableLike.init", "link" : "menu_commands\/PlayerOrder$.html#init:Repr", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[Player]", "member" : "scala.collection.TraversableLike.lastOption", "link" : "menu_commands\/PlayerOrder$.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[Player]", "member" : "scala.collection.TraversableLike.headOption", "link" : "menu_commands\/PlayerOrder$.html#headOption:Option[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (Player, B) ⇒ B)(bf: CanBuildFrom[Queue[Player], B, That]): That", "member" : "scala.collection.TraversableLike.scanRight", "link" : "menu_commands\/PlayerOrder$.html#scanRight[B,That](z:B)(op:(A,B)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, Player) ⇒ B)(bf: CanBuildFrom[Queue[Player], B, That]): That", "member" : "scala.collection.TraversableLike.scanLeft", "link" : "menu_commands\/PlayerOrder$.html#scanLeft[B,That](z:B)(op:(B,A)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) ⇒ B)(cbf: CanBuildFrom[Queue[Player], B, That]): That", "member" : "scala.collection.TraversableLike.scan", "link" : "menu_commands\/PlayerOrder$.html#scan[B>:A,That](z:B)(op:(B,B)=>B)(implicitcbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Player) ⇒ K): Map[K, Queue[Player]]", "member" : "scala.collection.TraversableLike.groupBy", "link" : "menu_commands\/PlayerOrder$.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,Repr]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (Player) ⇒ Boolean): (Queue[Player], Queue[Player])", "member" : "scala.collection.TraversableLike.partition", "link" : "menu_commands\/PlayerOrder$.html#partition(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Player, B])(bf: CanBuildFrom[Queue[Player], B, That]): That", "member" : "scala.collection.TraversableLike.collect", "link" : "menu_commands\/PlayerOrder$.html#collect[B,That](pf:PartialFunction[A,B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (Player) ⇒ Boolean): Queue[Player]", "member" : "scala.collection.TraversableLike.filterNot", "link" : "menu_commands\/PlayerOrder$.html#filterNot(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (Player) ⇒ Boolean): Queue[Player]", "member" : "scala.collection.TraversableLike.filter", "link" : "menu_commands\/PlayerOrder$.html#filter(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Player) ⇒ GenTraversableOnce[B])(bf: CanBuildFrom[Queue[Player], B, That]): That", "member" : "scala.collection.TraversableLike.flatMap", "link" : "menu_commands\/PlayerOrder$.html#flatMap[B,That](f:A=>scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Player) ⇒ B)(bf: CanBuildFrom[Queue[Player], B, That]): That", "member" : "scala.collection.TraversableLike.map", "link" : "menu_commands\/PlayerOrder$.html#map[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: Traversable[B])(bf: CanBuildFrom[Queue[Player], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "menu_commands\/PlayerOrder$.html#++:[B>:A,That](that:Traversable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: TraversableOnce[B])(bf: CanBuildFrom[Queue[Player], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "menu_commands\/PlayerOrder$.html#++:[B>:A,That](that:scala.collection.TraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++", "tail" : "(that: GenTraversableOnce[B])(bf: CanBuildFrom[Queue[Player], B, That]): That", "member" : "scala.collection.TraversableLike.++", "link" : "menu_commands\/PlayerOrder$.html#++[B>:A,That](that:scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.hasDefiniteSize", "link" : "menu_commands\/PlayerOrder$.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.isTraversableAgain", "link" : "menu_commands\/PlayerOrder$.html#isTraversableAgain:Boolean", "kind" : "final def"}, {"label" : "repr", "tail" : "(): Queue[Player]", "member" : "scala.collection.TraversableLike.repr", "link" : "menu_commands\/PlayerOrder$.html#repr:Repr", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "scala.collection.TraversableLike.Self", "link" : "menu_commands\/PlayerOrder$.html#Self=Repr", "kind" : "type"}, {"label" : "par", "tail" : "(): ParSeq[Player]", "member" : "scala.collection.Parallelizable.par", "link" : "menu_commands\/PlayerOrder$.html#par:ParRepr", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "menu_commands\/PlayerOrder$.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "menu_commands\/PlayerOrder$.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "menu_commands\/PlayerOrder$.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "menu_commands\/PlayerOrder$.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "menu_commands\/PlayerOrder$.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "menu_commands\/PlayerOrder$.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[Player, (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "menu_commands\/PlayerOrder$.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[Player]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "menu_commands\/PlayerOrder$.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "menu_commands\/PlayerOrder$.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "menu_commands\/PlayerOrder$.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[Player]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "menu_commands\/PlayerOrder$.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "menu_commands\/PlayerOrder$.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "menu_commands\/PlayerOrder$.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "menu_commands\/PlayerOrder$.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "menu_commands\/PlayerOrder$.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (Player) ⇒ B)(cmp: Ordering[B]): Player", "member" : "scala.collection.TraversableOnce.minBy", "link" : "menu_commands\/PlayerOrder$.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (Player) ⇒ B)(cmp: Ordering[B]): Player", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "menu_commands\/PlayerOrder$.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): Player", "member" : "scala.collection.TraversableOnce.max", "link" : "menu_commands\/PlayerOrder$.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): Player", "member" : "scala.collection.TraversableOnce.min", "link" : "menu_commands\/PlayerOrder$.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "menu_commands\/PlayerOrder$.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "menu_commands\/PlayerOrder$.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, Player) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "menu_commands\/PlayerOrder$.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "menu_commands\/PlayerOrder$.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "menu_commands\/PlayerOrder$.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "menu_commands\/PlayerOrder$.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (Player, B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "menu_commands\/PlayerOrder$.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, Player) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "menu_commands\/PlayerOrder$.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (Player, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "menu_commands\/PlayerOrder$.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, Player) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "menu_commands\/PlayerOrder$.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Player, B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "menu_commands\/PlayerOrder$.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (Player) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "menu_commands\/PlayerOrder$.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "menu_commands\/PlayerOrder$.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[Player]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "menu_commands\/PlayerOrder$.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "menu_commands\/PlayerOrder$.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "menu_commands\/PlayerOrder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "menu_commands\/PlayerOrder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "menu_commands\/PlayerOrder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "menu_commands\/PlayerOrder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "menu_commands\/PlayerOrder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "menu_commands\/PlayerOrder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "menu_commands\/PlayerOrder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/PlayerOrder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/PlayerOrder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "menu_commands\/PlayerOrder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "menu_commands\/PlayerOrder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "menu_commands\/PlayerOrder$.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "menu_commands\/PlayerOrder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "menu_commands\/PlayerOrder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "menu_commands\/PlayerOrder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};